<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group___arrays">
<title>DAOS Arrays</title>
<indexterm><primary>DAOS Arrays</primary></indexterm>
<simplesect>
    <title>Data Structures    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structdaos__range__t">daos_range_t</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structdaos__array__iod__t">daos_array_iod_t</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_group___arrays_1ga7802e29d354450453b50026c61285cb0"/><emphasis role="strong">if</emphasis> (add_attr) feat</para>
</listitem>
            <listitem><para>int <link linkend="_group___arrays_1gaeed8064a0c8949b7547660a09404ac8f">daos_array_create</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> coh, <link linkend="_structdaos__obj__id__t">daos_obj_id_t</link> oid, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, <link linkend="_group___types_1gaef45c835fcfbd5f969030fd7c854eb8a">daos_size_t</link> cell_size, <link linkend="_group___types_1gaef45c835fcfbd5f969030fd7c854eb8a">daos_size_t</link> chunk_size, <link linkend="_structdaos__handle__t">daos_handle_t</link> *oh, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_group___arrays_1ga309d54604a2e97fddd1b9396ed61cb3d">daos_array_open</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> coh, <link linkend="_structdaos__obj__id__t">daos_obj_id_t</link> oid, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, unsigned int mode, <link linkend="_group___types_1gaef45c835fcfbd5f969030fd7c854eb8a">daos_size_t</link> *cell_size, <link linkend="_group___types_1gaef45c835fcfbd5f969030fd7c854eb8a">daos_size_t</link> *chunk_size, <link linkend="_structdaos__handle__t">daos_handle_t</link> *oh, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_group___arrays_1ga9c841c2fb4b79566dfe4edff46a7e1bb">daos_array_open_with_attr</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> coh, <link linkend="_structdaos__obj__id__t">daos_obj_id_t</link> oid, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, unsigned int mode, <link linkend="_group___types_1gaef45c835fcfbd5f969030fd7c854eb8a">daos_size_t</link> cell_size, <link linkend="_group___types_1gaef45c835fcfbd5f969030fd7c854eb8a">daos_size_t</link> chunk_size, <link linkend="_structdaos__handle__t">daos_handle_t</link> *oh, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_group___arrays_1ga17971d649a2052cb44cfb4a3ddd36e18">daos_array_local2global</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, d_iov_t *glob)</para>
</listitem>
            <listitem><para>int <link linkend="_group___arrays_1ga98d549b722a6164b6c500b9811e2b52d">daos_array_global2local</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> coh, d_iov_t glob, unsigned int mode, <link linkend="_structdaos__handle__t">daos_handle_t</link> *oh)</para>
</listitem>
            <listitem><para>int <link linkend="_group___arrays_1ga28fed60c9a468122c8c54dbdb8b8ec0c">daos_array_close</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_group___arrays_1ga036a9c34cb863dba486097576cc45400">daos_array_read</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, <link linkend="_structdaos__array__iod__t">daos_array_iod_t</link> *iod, d_sg_list_t *sgl, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_group___arrays_1gab011b04b0f1cce149f677b07e7295c58">daos_array_write</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, <link linkend="_structdaos__array__iod__t">daos_array_iod_t</link> *iod, d_sg_list_t *sgl, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_group___arrays_1ga8129cd2cc09b3e6f7fcf6dd9d792a635">daos_array_get_size</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, <link linkend="_group___types_1gaef45c835fcfbd5f969030fd7c854eb8a">daos_size_t</link> *size, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_group___arrays_1ga4b5b648c935a34d9f3e5d0de1e1641d8">daos_array_set_size</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, <link linkend="_group___types_1gaef45c835fcfbd5f969030fd7c854eb8a">daos_size_t</link> size, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_group___arrays_1gad922154fcc6593928cf36005c203d1ec">daos_array_destroy</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_group___arrays_1gaa2e69755706bafcf5670a5e55c1900c9">daos_array_punch</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, <link linkend="_structdaos__array__iod__t">daos_array_iod_t</link> *iod, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_group___arrays_1ga3baced5fa05df343d638896b47fb73d6">daos_array_get_attr</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_group___types_1gaef45c835fcfbd5f969030fd7c854eb8a">daos_size_t</link> *chunk_size, <link linkend="_group___types_1gaef45c835fcfbd5f969030fd7c854eb8a">daos_size_t</link> *cell_size)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_group___arrays_1ga7200a91365daec3337f4562089300d31"/>static int <link linkend="_group___obj_class_1ga697f542a81cf2b46e3642a31ad289728">daos_oclass_id_t</link> <emphasis role="strong">cid</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_group___arrays_1gac4f83505ff130d566cb7b40645bf9c61"/>static int <link linkend="_group___obj_class_1ga697f542a81cf2b46e3642a31ad289728">daos_oclass_id_t</link> bool <emphasis role="strong">add_attr</emphasis></para>
</listitem>
            <listitem><para>static int <link linkend="_group___obj_class_1ga697f542a81cf2b46e3642a31ad289728">daos_oclass_id_t</link> bool uint32_t <emphasis role="strong">args</emphasis></para>
</listitem>
            <listitem><para>uint64_t <link linkend="_group___arrays_1ga772bb37caf561d1653d9f9a631e1ba33">hdr</link> = ((uint64_t)<link linkend="_group___object_1gaf6cf07da24f4d1d5d797c8dded3b9183">OID_FMT_VER</link> &lt;&lt; <link linkend="_group___object_1gab8ae2c87877cf92d74d2e98d531f3887">OID_FMT_VER_SHIFT</link>)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___arrays_1gaabfccb0e136cba3e5331959a54a614eb"/><emphasis role="strong">feat</emphasis> = <link linkend="_group___object_1ggadf764cbdea00d65edcd07bb9953ad2b7a87d90ee5b64d199f6c4a2ad3aecac857">DAOS_OF_DKEY_UINT64</link> | <link linkend="_group___object_1ggadf764cbdea00d65edcd07bb9953ad2b7ab1f5f48f233294b9e70d6ab758b3bd9c">DAOS_OF_KV_FLAT</link></para>
</listitem>
            <listitem><para><anchor xml:id="_group___arrays_1ga3e47cb96fe9d5e9c2fd2148684947648"/>oid <emphasis role="strong">hi</emphasis> = <link linkend="_group___object_1ga33cf9f5c6cd1f55e3c9ab55c25c478be">hdr</link></para>
</listitem>
            <listitem><para><anchor xml:id="_group___arrays_1ga9717e7bbecb906637e86cef6da3d83c2"/><emphasis role="strong">return</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_group___arrays_1ga28fed60c9a468122c8c54dbdb8b8ec0c"/>    <section>
    <title>daos_array_close()</title>
<indexterm><primary>daos_array_close</primary><secondary>DAOS Arrays</secondary></indexterm>
<indexterm><primary>DAOS Arrays</primary><secondary>daos_array_close</secondary></indexterm>
<para><computeroutput>int daos_array_close (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> * ev)</computeroutput></para>
<para>Close an opened array object.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>oh</entry>
                                <entry>
<para>Array object open handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. Function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned by <emphasis>ev::ev_error</emphasis> in non-blocking mode: 0 Success -DER_NO_HDL Invalid object open handle </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___arrays_1gaeed8064a0c8949b7547660a09404ac8f"/>    <section>
    <title>daos_array_create()</title>
<indexterm><primary>daos_array_create</primary><secondary>DAOS Arrays</secondary></indexterm>
<indexterm><primary>DAOS Arrays</primary><secondary>daos_array_create</secondary></indexterm>
<para><computeroutput>int daos_array_create (<link linkend="_structdaos__handle__t">daos_handle_t</link> coh, <link linkend="_structdaos__obj__id__t">daos_obj_id_t</link> oid, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, <link linkend="_group___types_1gaef45c835fcfbd5f969030fd7c854eb8a">daos_size_t</link> cell_size, <link linkend="_group___types_1gaef45c835fcfbd5f969030fd7c854eb8a">daos_size_t</link> chunk_size, <link linkend="_structdaos__handle__t">daos_handle_t</link> * oh, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> * ev)</computeroutput></para>
<para>Create an Array object. This opens a DAOS object and adds metadata under a special akey to define the cell size and chunk size. Further access to that object using the handle will use that metadata to store the array elements.</para>

<para>The metadata of the array is stored under a special AKEY in DKEY 0. This means that this is a generic array object with it&apos;s metadata tracked in the DAOS object. The feat bits in the oid must set DAOS_OF_DKEY_UINT64 | DAOS_OF_KV_FLAT | DAOS_OF_ARRAY. If the feat bits does not set DAOS_OF_ARRAY, the user would be responsible for remembering the array metadata since DAOS will not store those, and should not call this API since nothing will be written to the array object. daos_array_open_with_attrs() can be used to get an array OH in that case to access with the Array APIs.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>coh</entry>
                                <entry>
<para>Container open handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>oid</entry>
                                <entry>
<para>Object ID. It is required that the feat for dkey type be set to DAOS_OF_KV_FLAT | DAOS_OF_DKEY_UINT64 | DAOS_OF_ARRAY. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>th</entry>
                                <entry>
<para>Transaction handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>cell_size</entry>
                                <entry>
<para>Record size of the array. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>chunk_size</entry>
                                <entry>
<para>Number of contiguous records to store per DKey before moving to a different dkey. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>oh</entry>
                                <entry>
<para>Returned array object open handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. The function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned by <emphasis>ev::ev_error</emphasis> in non-blocking mode: 0 Success -DER_NO_HDL Invalid container handle -DER_INVAL Invalid parameter -DER_EXIST Array already exists -DER_UNREACH Network is unreachable </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___arrays_1gad922154fcc6593928cf36005c203d1ec"/>    <section>
    <title>daos_array_destroy()</title>
<indexterm><primary>daos_array_destroy</primary><secondary>DAOS Arrays</secondary></indexterm>
<indexterm><primary>DAOS Arrays</primary><secondary>daos_array_destroy</secondary></indexterm>
<para><computeroutput>int daos_array_destroy (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> * ev)</computeroutput></para>
<para>Destroy the array object by punching all data (keys) in the array object including the metadata associated with the array. <link linkend="_group___object_1ga908f76eaa33ae21cd835ab585804eca9">daos_obj_punch()</link> is called underneath. The oh still needs to be closed with a call to <link linkend="_group___arrays_1ga28fed60c9a468122c8c54dbdb8b8ec0c">daos_array_close()</link>, but any other access with that handle, or other array open handles, will fail. The destroy will happen regardless of any open handle, so it&apos;s the user responsibility to ensure that there is no further access to the array before the destroy is called.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>oh</entry>
                                <entry>
<para>Array object open handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>th</entry>
                                <entry>
<para>Transaction handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. Function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned by <emphasis>ev::ev_error</emphasis> in non-blocking mode: 0 Success -DER_NO_HDL Invalid object open handle -DER_INVAL Invalid parameter -DER_UNREACH Network is unreachable </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___arrays_1ga3baced5fa05df343d638896b47fb73d6"/>    <section>
    <title>daos_array_get_attr()</title>
<indexterm><primary>daos_array_get_attr</primary><secondary>DAOS Arrays</secondary></indexterm>
<indexterm><primary>DAOS Arrays</primary><secondary>daos_array_get_attr</secondary></indexterm>
<para><computeroutput>int daos_array_get_attr (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_group___types_1gaef45c835fcfbd5f969030fd7c854eb8a">daos_size_t</link> * chunk_size, <link linkend="_group___types_1gaef45c835fcfbd5f969030fd7c854eb8a">daos_size_t</link> * cell_size)</computeroutput></para>
<para>Retrieve array cell and chunk size from an open handle.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>oh</entry>
                                <entry>
<para>Array object open handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>chunk_size</entry>
                                <entry>
<para>Chunk size of the array. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>cell_size</entry>
                                <entry>
<para>Cell size of the array.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned by <emphasis>ev::ev_error</emphasis> in non-blocking mode: 0 Success -DER_NO_HDL Invalid object open handle -DER_INVAL Invalid parameter </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___arrays_1ga8129cd2cc09b3e6f7fcf6dd9d792a635"/>    <section>
    <title>daos_array_get_size()</title>
<indexterm><primary>daos_array_get_size</primary><secondary>DAOS Arrays</secondary></indexterm>
<indexterm><primary>DAOS Arrays</primary><secondary>daos_array_get_size</secondary></indexterm>
<para><computeroutput>int daos_array_get_size (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, <link linkend="_group___types_1gaef45c835fcfbd5f969030fd7c854eb8a">daos_size_t</link> * size, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> * ev)</computeroutput></para>
<para>Query the number of records in the array object.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>oh</entry>
                                <entry>
<para>Array object open handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>th</entry>
                                <entry>
<para>Transaction handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>size</entry>
                                <entry>
<para>Returned array size (number of records). </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. Function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned by <emphasis>ev::ev_error</emphasis> in non-blocking mode: 0 Success -DER_NO_HDL Invalid object open handle -DER_INVAL Invalid parameter -DER_UNREACH Network is unreachable </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___arrays_1ga98d549b722a6164b6c500b9811e2b52d"/>    <section>
    <title>daos_array_global2local()</title>
<indexterm><primary>daos_array_global2local</primary><secondary>DAOS Arrays</secondary></indexterm>
<indexterm><primary>DAOS Arrays</primary><secondary>daos_array_global2local</secondary></indexterm>
<para><computeroutput>int daos_array_global2local (<link linkend="_structdaos__handle__t">daos_handle_t</link> coh, d_iov_t glob, unsigned int mode, <link linkend="_structdaos__handle__t">daos_handle_t</link> * oh)</computeroutput></para>
<para>Create a local array open handle for global representation data. This handle has to be closed with <link linkend="_group___arrays_1ga28fed60c9a468122c8c54dbdb8b8ec0c">daos_array_close()</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>coh</entry>
                                <entry>
<para>Container open handle the array belongs to </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>glob</entry>
                                <entry>
<para>Global (shared) representation of a collective handle to be extracted </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>mode</entry>
                                <entry>
<para>Option to change the object open mode. Pass 0 to inherit the global mode. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>oh</entry>
                                <entry>
<para>Returned local array open handle</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned: non-blocking mode: 0 Success -DER_INVAL Invalid parameter -DER_NO_HDL Container handle is nonexistent </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___arrays_1ga17971d649a2052cb44cfb4a3ddd36e18"/>    <section>
    <title>daos_array_local2global()</title>
<indexterm><primary>daos_array_local2global</primary><secondary>DAOS Arrays</secondary></indexterm>
<indexterm><primary>DAOS Arrays</primary><secondary>daos_array_local2global</secondary></indexterm>
<para><computeroutput>int daos_array_local2global (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, d_iov_t * glob)</computeroutput></para>
<para>Convert a local array handle to global representation data which can be shared with peer processes. If glob-&gt;iov_buf is set to NULL, the actual size of the global handle is returned through glob-&gt;iov_buf_len. This function does not involve any communication and does not block.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>oh</entry>
                                <entry>
<para>valid local array object open handle to be shared </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>glob</entry>
                                <entry>
<para>pointer to iov of the buffer to store handle information</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned: non-blocking mode: 0 Success -DER_INVAL Invalid parameter -DER_NO_HDL Array handle is nonexistent -DER_TRUNC Buffer in <emphasis>glob</emphasis> is too short, larger buffer required. In this case the required buffer size is returned through glob-&gt;iov_buf_len. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___arrays_1ga309d54604a2e97fddd1b9396ed61cb3d"/>    <section>
    <title>daos_array_open()</title>
<indexterm><primary>daos_array_open</primary><secondary>DAOS Arrays</secondary></indexterm>
<indexterm><primary>DAOS Arrays</primary><secondary>daos_array_open</secondary></indexterm>
<para><computeroutput>int daos_array_open (<link linkend="_structdaos__handle__t">daos_handle_t</link> coh, <link linkend="_structdaos__obj__id__t">daos_obj_id_t</link> oid, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, unsigned int mode, <link linkend="_group___types_1gaef45c835fcfbd5f969030fd7c854eb8a">daos_size_t</link> * cell_size, <link linkend="_group___types_1gaef45c835fcfbd5f969030fd7c854eb8a">daos_size_t</link> * chunk_size, <link linkend="_structdaos__handle__t">daos_handle_t</link> * oh, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> * ev)</computeroutput></para>
<para>Open an Array object. If the array has not been created before (no array metadata exists), this will fail.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>coh</entry>
                                <entry>
<para>Container open handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>oid</entry>
                                <entry>
<para>Object ID. It is required that the feat for dkey type be set to DAOS_OF_KV_FLAT | DAOS_OF_DKEY_UINT64 | DAOS_OF_ARRAY. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>th</entry>
                                <entry>
<para>Transaction handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>mode</entry>
                                <entry>
<para>Open mode: DAOS_OO_RO/RW </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>cell_size</entry>
                                <entry>
<para>Record size of the array. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>chunk_size</entry>
                                <entry>
<para>Contiguous bytes to store per DKey before moving to a different dkey. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>oh</entry>
                                <entry>
<para>Returned array object open handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. The function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned by <emphasis>ev::ev_error</emphasis> in non-blocking mode: 0 Success -DER_NO_HDL Invalid container handle -DER_INVAL Invalid parameter -DER_NO_PERM Permission denied -DER_NONEXIST Cannot find object -DER_UNREACH Network is unreachable </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___arrays_1ga9c841c2fb4b79566dfe4edff46a7e1bb"/>    <section>
    <title>daos_array_open_with_attr()</title>
<indexterm><primary>daos_array_open_with_attr</primary><secondary>DAOS Arrays</secondary></indexterm>
<indexterm><primary>DAOS Arrays</primary><secondary>daos_array_open_with_attr</secondary></indexterm>
<para><computeroutput>int daos_array_open_with_attr (<link linkend="_structdaos__handle__t">daos_handle_t</link> coh, <link linkend="_structdaos__obj__id__t">daos_obj_id_t</link> oid, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, unsigned int mode, <link linkend="_group___types_1gaef45c835fcfbd5f969030fd7c854eb8a">daos_size_t</link> cell_size, <link linkend="_group___types_1gaef45c835fcfbd5f969030fd7c854eb8a">daos_size_t</link> chunk_size, <link linkend="_structdaos__handle__t">daos_handle_t</link> * oh, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> * ev)</computeroutput></para>
<para>Open an Array object with the array attributes specified by the user. This is the same as the create call if the object does not exist, except that nothing is updated in the object, and the API just returns an OH to the user. If the array was accessed with different cell_size and chunk_size before, accessing it again will introduce corruption in the array data.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>coh</entry>
                                <entry>
<para>Container open handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>oid</entry>
                                <entry>
<para>Object ID. It is required that the feat for dkey type be set to DAOS_OF_DKEY_UINT64 | DAOS_OF_KV_FLAT. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>th</entry>
                                <entry>
<para>Transaction handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>mode</entry>
                                <entry>
<para>Open mode: DAOS_OO_RO/RW </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>cell_size</entry>
                                <entry>
<para>Record size of the array. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>chunk_size</entry>
                                <entry>
<para>Contiguous bytes to store per DKey before moving to a different dkey. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>oh</entry>
                                <entry>
<para>Returned array object open handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. The function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned by <emphasis>ev::ev_error</emphasis> in non-blocking mode: 0 Success -DER_NO_HDL Invalid container handle -DER_INVAL Invalid parameter -DER_NO_PERM Permission denied </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___arrays_1gaa2e69755706bafcf5670a5e55c1900c9"/>    <section>
    <title>daos_array_punch()</title>
<indexterm><primary>daos_array_punch</primary><secondary>DAOS Arrays</secondary></indexterm>
<indexterm><primary>DAOS Arrays</primary><secondary>daos_array_punch</secondary></indexterm>
<para><computeroutput>int daos_array_punch (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, <link linkend="_structdaos__array__iod__t">daos_array_iod_t</link> * iod, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> * ev)</computeroutput></para>
<para>Punch a hole in the array indicated by the range in the iod.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>oh</entry>
                                <entry>
<para>Array object open handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>th</entry>
                                <entry>
<para>Transaction handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>iod</entry>
                                <entry>
<para>IO descriptor of ranges to punch in the array. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. Function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned by <emphasis>ev::ev_error</emphasis> in non-blocking mode: 0 Success -DER_NO_HDL Invalid object open handle -DER_INVAL Invalid parameter -DER_UNREACH Network is unreachable </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___arrays_1ga036a9c34cb863dba486097576cc45400"/>    <section>
    <title>daos_array_read()</title>
<indexterm><primary>daos_array_read</primary><secondary>DAOS Arrays</secondary></indexterm>
<indexterm><primary>DAOS Arrays</primary><secondary>daos_array_read</secondary></indexterm>
<para><computeroutput>int daos_array_read (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, <link linkend="_structdaos__array__iod__t">daos_array_iod_t</link> * iod, d_sg_list_t * sgl, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> * ev)</computeroutput></para>
<para>Read data from an array object.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>oh</entry>
                                <entry>
<para>Array object open handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>th</entry>
                                <entry>
<para>Transaction handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>iod</entry>
                                <entry>
<para>IO descriptor of ranges to read from the array. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>sgl</entry>
                                <entry>
<para>A scatter/gather list (sgl) to the store array data. Buffer sizes do not have to match the individual range sizes as long as the total size does. User allocates the buffer(s) and sets the length of each buffer. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. Function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned by <emphasis>ev::ev_error</emphasis> in non-blocking mode: 0 Success -DER_NO_HDL Invalid object open handle -DER_INVAL Invalid parameter -DER_UNREACH Network is unreachable -DER_REC2BIG Record is too large and can&apos;t be fit into output buffer </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___arrays_1ga4b5b648c935a34d9f3e5d0de1e1641d8"/>    <section>
    <title>daos_array_set_size()</title>
<indexterm><primary>daos_array_set_size</primary><secondary>DAOS Arrays</secondary></indexterm>
<indexterm><primary>DAOS Arrays</primary><secondary>daos_array_set_size</secondary></indexterm>
<para><computeroutput>int daos_array_set_size (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, <link linkend="_group___types_1gaef45c835fcfbd5f969030fd7c854eb8a">daos_size_t</link> size, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> * ev)</computeroutput></para>
<para>Set the array size (truncate) in records. If array is shrinking, we punch dkeys/records above the required size. If the array is epxanding, we insert 1 record at the corresponding size. This is NOT equivalent to an allocate.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>oh</entry>
                                <entry>
<para>Array object open handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>th</entry>
                                <entry>
<para>Transaction handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>size</entry>
                                <entry>
<para>Size (number of records) to set array to. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. Function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned by <emphasis>ev::ev_error</emphasis> in non-blocking mode: 0 Success -DER_NO_HDL Invalid object open handle -DER_INVAL Invalid parameter -DER_UNREACH Network is unreachable </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___arrays_1gab011b04b0f1cce149f677b07e7295c58"/>    <section>
    <title>daos_array_write()</title>
<indexterm><primary>daos_array_write</primary><secondary>DAOS Arrays</secondary></indexterm>
<indexterm><primary>DAOS Arrays</primary><secondary>daos_array_write</secondary></indexterm>
<para><computeroutput>int daos_array_write (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, <link linkend="_structdaos__array__iod__t">daos_array_iod_t</link> * iod, d_sg_list_t * sgl, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> * ev)</computeroutput></para>
<para>Write data to an array object.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>oh</entry>
                                <entry>
<para>Array object open handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>th</entry>
                                <entry>
<para>Transaction handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>iod</entry>
                                <entry>
<para>IO descriptor of ranges to write to the array. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>sgl</entry>
                                <entry>
<para>A scatter/gather list (sgl) to the store array data. Buffer sizes do not have to match the individual range sizes as long as the total size does. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. Function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned by <emphasis>ev::ev_error</emphasis> in non-blocking mode: 0 Success -DER_NO_HDL Invalid object open handle -DER_INVAL Invalid parameter -DER_UNREACH Network is unreachable -DER_REC2BIG Record is too large and can&apos;t be fit into output buffer </para>
</formalpara>
</para>
</section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_group___arrays_1ga5b92f9dd0825ec678f19d3b853be080d"/>    <section>
    <title>args</title>
<indexterm><primary>args</primary><secondary>DAOS Arrays</secondary></indexterm>
<indexterm><primary>DAOS Arrays</primary><secondary>args</secondary></indexterm>
<para><computeroutput>int <link linkend="_group___obj_class_1ga697f542a81cf2b46e3642a31ad289728">daos_oclass_id_t</link> bool uint32_t args</computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting>{
&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_group___obj_class_1ga209e09a39a0f553b2c1e9a5f7f558e2e">daos_ofeat_t</link>&#32;feat
</programlisting><para>
Definition at line 69 of file daos_array.h.</para>
    </section><anchor xml:id="_group___arrays_1ga772bb37caf561d1653d9f9a631e1ba33"/>    <section>
    <title>hdr</title>
<indexterm><primary>hdr</primary><secondary>DAOS Arrays</secondary></indexterm>
<indexterm><primary>DAOS Arrays</primary><secondary>hdr</secondary></indexterm>
<para><computeroutput>oid hi &amp; hdr = ((uint64_t)<link linkend="_group___object_1gaf6cf07da24f4d1d5d797c8dded3b9183">OID_FMT_VER</link> &lt;&lt; <link linkend="_group___object_1gab8ae2c87877cf92d74d2e98d531f3887">OID_FMT_VER_SHIFT</link>)</computeroutput></para>
<para>| Upper bits contain | OID_FMT_VER_BITS (version) | | OID_FMT_FEAT_BITS (object features) | | OID_FMT_CLASS_BITS (object class) | | 96-bit for upper layer ... | </para>
<para>
Definition at line 71 of file daos_array.h.</para>
</section>
</section>
</section>
