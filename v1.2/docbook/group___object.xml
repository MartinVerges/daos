<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group___object">
<title>DAOS Object</title>
<indexterm><primary>DAOS Object</primary></indexterm>
<simplesect>
    <title>Data Structures    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structdaos__obj__attr">daos_obj_attr</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structdaos__oid__list">daos_oid_list</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structdaos__recx__t">daos_recx_t</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structdaos__iod__t">daos_iod_t</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structdaos__iom__t">daos_iom_t</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structdaos__key__desc__t">daos_key_desc_t</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_group___object_1ga50bf00cd6e35c0cb4fca9b9028449415"/>#define <emphasis role="strong">DAOS_OBJ_NIL</emphasis>   ((<link linkend="_structdaos__obj__id__t">daos_obj_id_t</link>){0})</para>
</listitem>
            <listitem><para>#define <link linkend="_group___object_1gaf6cf07da24f4d1d5d797c8dded3b9183">OID_FMT_VER</link>   1</para>
</listitem>
            <listitem><para>#define <link linkend="_group___object_1ga6e827318e60c8fb10f9f9a1743ffdeb5">OID_FMT_INTR_BITS</link>   32</para>
</listitem>
            <listitem><para>#define <link linkend="_group___object_1ga9ad8f0c0ae7b7bb402fbe5e69a6c6990">OID_FMT_VER_BITS</link>   4</para>
</listitem>
            <listitem><para>#define <link linkend="_group___object_1ga2a78a514cd805d1c12048159ffaf1308">OID_FMT_FEAT_BITS</link>   16</para>
</listitem>
            <listitem><para>#define <link linkend="_group___object_1gac1b5e80dc121f9be1cc4283cdea68bdc">OID_FMT_CLASS_BITS</link></para>
</listitem>
            <listitem><para>#define <link linkend="_group___object_1gab8ae2c87877cf92d74d2e98d531f3887">OID_FMT_VER_SHIFT</link>   (64 - <link linkend="_group___object_1ga9ad8f0c0ae7b7bb402fbe5e69a6c6990">OID_FMT_VER_BITS</link>)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___object_1gaeabb96073177cb5daaaaf5f833ab0d7f">OID_FMT_FEAT_SHIFT</link>   (<link linkend="_group___object_1gab8ae2c87877cf92d74d2e98d531f3887">OID_FMT_VER_SHIFT</link> - <link linkend="_group___object_1ga2a78a514cd805d1c12048159ffaf1308">OID_FMT_FEAT_BITS</link>)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___object_1gacd34f177e4efb7923a3a399c4aff7dc1">OID_FMT_CLASS_SHIFT</link>   (<link linkend="_group___object_1gaeabb96073177cb5daaaaf5f833ab0d7f">OID_FMT_FEAT_SHIFT</link> - <link linkend="_group___object_1gac1b5e80dc121f9be1cc4283cdea68bdc">OID_FMT_CLASS_BITS</link>)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___object_1ga2c62d04c8ce286c4f27f6485a33a5b36">OID_FMT_VER_MAX</link>   ((1ULL &lt;&lt; <link linkend="_group___object_1ga9ad8f0c0ae7b7bb402fbe5e69a6c6990">OID_FMT_VER_BITS</link>) - 1)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___object_1gaf4d0c03b791d27a49d9a1259b63fbb8d">OID_FMT_FEAT_MAX</link>   ((1ULL &lt;&lt; <link linkend="_group___object_1ga2a78a514cd805d1c12048159ffaf1308">OID_FMT_FEAT_BITS</link>) - 1)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___object_1gac363015d1bab238ef13ed3c29d56690c">OID_FMT_CLASS_MAX</link>   ((1ULL &lt;&lt; <link linkend="_group___object_1gac1b5e80dc121f9be1cc4283cdea68bdc">OID_FMT_CLASS_BITS</link>) - 1)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___object_1gae2aa3232b3d3b04255e28bd78965f242">OID_FMT_VER_MASK</link>   (<link linkend="_group___object_1ga2c62d04c8ce286c4f27f6485a33a5b36">OID_FMT_VER_MAX</link> &lt;&lt; <link linkend="_group___object_1gab8ae2c87877cf92d74d2e98d531f3887">OID_FMT_VER_SHIFT</link>)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___object_1ga75f02b5264ffa638d2f1add5f67d0b1c">OID_FMT_FEAT_MASK</link>   (<link linkend="_group___object_1gaf4d0c03b791d27a49d9a1259b63fbb8d">OID_FMT_FEAT_MAX</link> &lt;&lt; <link linkend="_group___object_1gaeabb96073177cb5daaaaf5f833ab0d7f">OID_FMT_FEAT_SHIFT</link>)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___object_1ga5b6e268ad436ce59a98b747f0fddea14">OID_FMT_CLASS_MASK</link>   (<link linkend="_group___object_1gac363015d1bab238ef13ed3c29d56690c">OID_FMT_CLASS_MAX</link> &lt;&lt; <link linkend="_group___object_1gacd34f177e4efb7923a3a399c4aff7dc1">OID_FMT_CLASS_SHIFT</link>)</para>
</listitem>
            <listitem><para>#define <link linkend="_group___object_1ga894ef9dc89009c226ca921abca33571f">IO_FLAGS_COND_BITS</link>   8</para>
</listitem>
            <listitem><para>#define <link linkend="_group___object_1ga57109faf60a87bdd6ac1b5653e0b2e45">DAOS_IOMF_DETAIL</link>   (0x1U)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___object_1ga5258661415881972f2c148f8e9e025b0"/>#define <emphasis role="strong">DAOS_OCH_RDD_BITS</emphasis>   4</para>
</listitem>
            <listitem><para><anchor xml:id="_group___object_1ga8469bba5462aba1242b39c5c4f423dbd"/>#define <emphasis role="strong">DAOS_OCH_SHD_BITS</emphasis>   6</para>
</listitem>
            <listitem><para><anchor xml:id="_group___object_1ga55768ca3c2d91d4d2c15fb7491fb8a70"/>#define <emphasis role="strong">DAOS_OCH_RDD_SHIFT</emphasis>   0</para>
</listitem>
            <listitem><para><anchor xml:id="_group___object_1ga72df250ea15ff59e1069c66467aa5a1a"/>#define <emphasis role="strong">DAOS_OCH_SHD_SHIFT</emphasis>   DAOS_OCH_RDD_BITS</para>
</listitem>
            <listitem><para><anchor xml:id="_group___object_1ga7b08fed6e4c818ff7c923cfc44b54323"/>#define <emphasis role="strong">DAOS_OCH_RDD_MAX_VAL</emphasis>   ((1ULL &lt;&lt; DAOS_OCH_RDD_BITS) - 1)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___object_1ga9e5ebb4510ef8b3b4ce3d98152a062d5"/>#define <emphasis role="strong">DAOS_OCH_SHD_MAX_VAL</emphasis>   ((1ULL &lt;&lt; DAOS_OCH_SHD_BITS) - 1)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___object_1gaf717de7c41288403e816924e83489595"/>#define <emphasis role="strong">DAOS_OCH_RDD_MASK</emphasis>   (DAOS_OCH_RDD_MAX_VAL &lt;&lt; DAOS_OCH_RDD_SHIFT)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___object_1ga3912408a5a99d52174bd17116a4275ba"/>#define <emphasis role="strong">DAOS_OCH_SHD_MASK</emphasis>   (DAOS_OCH_SHD_MAX_VAL &lt;&lt; DAOS_OCH_SHD_SHIFT)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum { 
<link linkend="_group___object_1ggadf764cbdea00d65edcd07bb9953ad2b7a87d90ee5b64d199f6c4a2ad3aecac857">DAOS_OF_DKEY_UINT64</link> = (1 &lt;&lt; 0), 
<link linkend="_group___object_1ggadf764cbdea00d65edcd07bb9953ad2b7abb97c9120a8f82c18740a78ff92e256a">DAOS_OF_DKEY_LEXICAL</link> = (1 &lt;&lt; 1), 
<link linkend="_group___object_1ggadf764cbdea00d65edcd07bb9953ad2b7a50ae771152c6ccb1a574ec005a5f25b3">DAOS_OF_AKEY_UINT64</link> = (1 &lt;&lt; 2), 
<link linkend="_group___object_1ggadf764cbdea00d65edcd07bb9953ad2b7aa1b33921d7fa8f730a6b05a7e8d917e2">DAOS_OF_AKEY_LEXICAL</link> = (1 &lt;&lt; 3), 

<link linkend="_group___object_1ggadf764cbdea00d65edcd07bb9953ad2b7ab1f5f48f233294b9e70d6ab758b3bd9c">DAOS_OF_KV_FLAT</link> = (1 &lt;&lt; 4), 
<link linkend="_group___object_1ggadf764cbdea00d65edcd07bb9953ad2b7a9c99c37288abba0b7bc29f068cfc10e9">DAOS_OF_ARRAY</link> = (1 &lt;&lt; 5), 
<link linkend="_group___object_1ggadf764cbdea00d65edcd07bb9953ad2b7a36152105662c1ec1548d00920375f259">DAOS_OF_ARRAY_MD</link> = (1 &lt;&lt; 6), 
<link linkend="_group___object_1ggadf764cbdea00d65edcd07bb9953ad2b7aea33ee78663b48d6f2a935a62fa459ec">DAOS_OF_ARRAY_BYTE</link> = (1 &lt;&lt; 7), 

<link linkend="_group___object_1ggadf764cbdea00d65edcd07bb9953ad2b7ab9f7f1443d6959c29c8185d673ebc25a">DAOS_OF_ECHO</link> = (1 &lt;&lt; 15), 
<link linkend="_group___object_1ggadf764cbdea00d65edcd07bb9953ad2b7a7b52678d7be28cf9f836261f08aac2dd">DAOS_OF_MASK</link> = ((1 &lt;&lt; OID_FMT_FEAT_BITS) - 1)
 }</para>
</listitem>
            <listitem><para>enum { 
<emphasis role="strong">DAOS_COND_PUNCH</emphasis> = (1 &lt;&lt; 0), 
<emphasis role="strong">DAOS_COND_DKEY_INSERT</emphasis> = (1 &lt;&lt; 1), 
<emphasis role="strong">DAOS_COND_DKEY_UPDATE</emphasis> = (1 &lt;&lt; 2), 
<emphasis role="strong">DAOS_COND_DKEY_FETCH</emphasis> = (1 &lt;&lt; 3), 

<emphasis role="strong">DAOS_COND_AKEY_INSERT</emphasis> = (1 &lt;&lt; 4), 
<emphasis role="strong">DAOS_COND_AKEY_UPDATE</emphasis> = (1 &lt;&lt; 5), 
<emphasis role="strong">DAOS_COND_AKEY_FETCH</emphasis> = (1 &lt;&lt; 6), 
<emphasis role="strong">DAOS_COND_PER_AKEY</emphasis> = (1 &lt;&lt; 7), 

<link linkend="_group___object_1gga99fb83031ce9923c84392b4e92f956b5a2edaa02e2234362dd2df9bf125bb952e">DAOS_COND_MASK</link> = ((1 &lt;&lt; IO_FLAGS_COND_BITS) - 1)
 }</para>
</listitem>
            <listitem><para>enum { 
<link linkend="_group___object_1ggabc6126af1d45847bc59afa0aa3216b04a8a8a364caa60e6f62762da6418b34a2a">DAOS_OO_RO</link> = (1 &lt;&lt; 1), 
<link linkend="_group___object_1ggabc6126af1d45847bc59afa0aa3216b04a4b9ba12d229d218712918cba7567e467">DAOS_OO_RW</link> = (1 &lt;&lt; 2), 
<link linkend="_group___object_1ggabc6126af1d45847bc59afa0aa3216b04a0d460d938b4b61391b641c0277c7023f">DAOS_OO_EXCL</link> = (1 &lt;&lt; 3), 
<link linkend="_group___object_1ggabc6126af1d45847bc59afa0aa3216b04a13a6ffa3e3e3848618e1ea42dfad6bbc">DAOS_OO_IO_RAND</link> = (1 &lt;&lt; 4), 

<link linkend="_group___object_1ggabc6126af1d45847bc59afa0aa3216b04a19fb8bfc81d27cda38d0f123f42ee59b">DAOS_OO_IO_SEQ</link> = (1 &lt;&lt; 5)
 }</para>
</listitem>
            <listitem><para>enum <link linkend="_group___object_1gab06c379248eb344585279218839d165a">daos_iod_type_t</link> { <link linkend="_group___object_1ggab06c379248eb344585279218839d165aa610a5373995cf58d54b3a93338ef32bd">DAOS_IOD_NONE</link> = 0, 
<link linkend="_group___object_1ggab06c379248eb344585279218839d165aa62ea1db9eac42b49c5d31fcc1a04625e">DAOS_IOD_SINGLE</link> = 1, 
<link linkend="_group___object_1ggab06c379248eb344585279218839d165aacda4f32ddc3881026d2f01376c9f3b04">DAOS_IOD_ARRAY</link> = 2
 }</para>
</listitem>
            <listitem><para>enum { <link linkend="_group___object_1ggadc29c2ff13d900c2f185ee95427fb06ca19c0e430fdf0522c1cb12f1fc6a4e3c9">DAOS_REC_ANY</link> = 0
 }</para>
</listitem>
            <listitem><para>enum { 
<link linkend="_group___object_1gga61dadd085c1777f559549e05962b2c9ea6dec2ecc39fcc27109275cbb78ab9a9e">DAOS_GET_MAX</link> = (1 &lt;&lt; 0), 
<link linkend="_group___object_1gga61dadd085c1777f559549e05962b2c9ea4b0331ebc729be6019155eb6fe259def">DAOS_GET_MIN</link> = (1 &lt;&lt; 1), 
<link linkend="_group___object_1gga61dadd085c1777f559549e05962b2c9ea0c6f937667919c33f24411b84d270c54">DAOS_GET_DKEY</link> = (1 &lt;&lt; 2), 
<link linkend="_group___object_1gga61dadd085c1777f559549e05962b2c9ea1f9bc2fa6a272d1e2ddbcef0c877ae31">DAOS_GET_AKEY</link> = (1 &lt;&lt; 3), 

<link linkend="_group___object_1gga61dadd085c1777f559549e05962b2c9ea3029b65b94d748f583b6f22cc6a7ddfa">DAOS_GET_RECX</link> = (1 &lt;&lt; 4)
 }</para>
</listitem>
            <listitem><para>enum { 
<link linkend="_group___object_1gga726ca809ffd3d67ab4b8476646f26635a2cccf3a7298503e86a91688bfe09cda5">DAOS_OCH_RDD_DEF</link> = (1 &lt;&lt; 0), 
<link linkend="_group___object_1gga726ca809ffd3d67ab4b8476646f26635a4ccf3bb2b8990b78922f2e17e6a1cfc6">DAOS_OCH_RDD_NO</link> = (1 &lt;&lt; 1), 
<link linkend="_group___object_1gga726ca809ffd3d67ab4b8476646f26635a7d10aa59655cb3895c040682e9f20fc6">DAOS_OCH_RDD_RP</link> = (1 &lt;&lt; 2), 
<link linkend="_group___object_1gga726ca809ffd3d67ab4b8476646f26635a9660ba1849177647df653bcb80ad0b2f">DAOS_OCH_RDD_EC</link> = (1 &lt;&lt; 3), 

<link linkend="_group___object_1gga726ca809ffd3d67ab4b8476646f26635a2791d9cc44b9a44f4a308702da3b9c6d">DAOS_OCH_SHD_DEF</link> = (1 &lt;&lt; 4), 
<link linkend="_group___object_1gga726ca809ffd3d67ab4b8476646f26635ae7509ceba642bb19c89403b5bd7e16fc">DAOS_OCH_SHD_TINY</link> = (1 &lt;&lt; 5), 
<link linkend="_group___object_1gga726ca809ffd3d67ab4b8476646f26635a52ce9f92281ec35df0a095d18b4f3164">DAOS_OCH_SHD_REG</link> = (1 &lt;&lt; 6), 
<link linkend="_group___object_1gga726ca809ffd3d67ab4b8476646f26635af7baee844f762cc9cd5dcd5ab1861769">DAOS_OCH_SHD_HI</link> = (1 &lt;&lt; 7), 

<link linkend="_group___object_1gga726ca809ffd3d67ab4b8476646f26635a893cd553b0db274ef817d300d30cc49f">DAOS_OCH_SHD_EXT</link> = (1 &lt;&lt; 8), 
<link linkend="_group___object_1gga726ca809ffd3d67ab4b8476646f26635af56db904691343f0d38966e0424097bb">DAOS_OCH_SHD_MAX</link> = (1 &lt;&lt; 9)
 }</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>int <link linkend="_group___object_1ga6a254a72b728607b212850f0eefcdff4">daos_obj_generate_oid</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> coh, <link linkend="_structdaos__obj__id__t">daos_obj_id_t</link> *oid, <link linkend="_group___obj_class_1ga209e09a39a0f553b2c1e9a5f7f558e2e">daos_ofeat_t</link> ofeats, <link linkend="_group___obj_class_1ga697f542a81cf2b46e3642a31ad289728">daos_oclass_id_t</link> cid, <link linkend="_group___obj_class_1ga3b8f3311463c936d904f349c817862f1">daos_oclass_hints_t</link> hints, uint32_t args)</para>
</listitem>
            <listitem><para>int <link linkend="_group___object_1ga34c5792cce236833d0534f54b32b952a">daos_obj_open</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> coh, <link linkend="_structdaos__obj__id__t">daos_obj_id_t</link> oid, unsigned int mode, <link linkend="_structdaos__handle__t">daos_handle_t</link> *oh, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_group___object_1gaa928f6519b3f182d81f69db5d081be8f">daos_obj_close</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_group___object_1ga908f76eaa33ae21cd835ab585804eca9">daos_obj_punch</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, uint64_t flags, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_group___object_1gafeb0492149d0989edb60e4e68bffadcf">daos_obj_punch_dkeys</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, uint64_t flags, unsigned int nr, daos_key_t *dkeys, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_group___object_1gafd35212c3ba43f1263b319bdd5271db7">daos_obj_punch_akeys</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, uint64_t flags, daos_key_t *dkey, unsigned int nr, daos_key_t *akeys, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_group___object_1ga92102450d9f5a985b65b663f25502c30">daos_obj_query</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, struct <link linkend="_structdaos__obj__attr">daos_obj_attr</link> *oa, d_rank_list_t *ranks, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_group___object_1ga28d71e7752659a6dd9062a59e7345214">daos_obj_fetch</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, uint64_t flags, daos_key_t *dkey, unsigned int nr, <link linkend="_structdaos__iod__t">daos_iod_t</link> *iods, d_sg_list_t *sgls, <link linkend="_structdaos__iom__t">daos_iom_t</link> *ioms, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_group___object_1ga562cff4284985245e07a691ec3769314">daos_obj_update</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, uint64_t flags, daos_key_t *dkey, unsigned int nr, <link linkend="_structdaos__iod__t">daos_iod_t</link> *iods, d_sg_list_t *sgls, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_group___object_1gab1191b15617a670ab7af8a4a9466c263">daos_obj_list_dkey</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, uint32_t *nr, <link linkend="_structdaos__key__desc__t">daos_key_desc_t</link> *kds, d_sg_list_t *sgl, <link linkend="_structdaos__anchor__t">daos_anchor_t</link> *anchor, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_group___object_1gac0d8c82eca4c1d3532f797d4f0b9f4b7">daos_obj_list_akey</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, daos_key_t *dkey, uint32_t *nr, <link linkend="_structdaos__key__desc__t">daos_key_desc_t</link> *kds, d_sg_list_t *sgl, <link linkend="_structdaos__anchor__t">daos_anchor_t</link> *anchor, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_group___object_1gaeb05e2d9823ec30a8fa6997f5f549714">daos_obj_list_recx</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, daos_key_t *dkey, daos_key_t *akey, <link linkend="_group___types_1gaef45c835fcfbd5f969030fd7c854eb8a">daos_size_t</link> *size, uint32_t *nr, <link linkend="_structdaos__recx__t">daos_recx_t</link> *recxs, <link linkend="_structdaos__epoch__range__t">daos_epoch_range_t</link> *eprs, <link linkend="_structdaos__anchor__t">daos_anchor_t</link> *anchor, bool incr_order, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_group___object_1gab66aaecceb3b77c3bba57f1c0fe0e480">daos_obj_query_key</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, uint64_t flags, daos_key_t *dkey, daos_key_t *akey, <link linkend="_structdaos__recx__t">daos_recx_t</link> *recx, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_group___object_1ga0ba9dce86987ab42fe63fd94dda297ea">daos_obj_verify</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> coh, <link linkend="_structdaos__obj__id__t">daos_obj_id_t</link> oid, <link linkend="_group___types_1gae363d5e93e32d7104d2bdaf97bfa5d61">daos_epoch_t</link> epoch)</para>
</listitem>
            <listitem><para>int <link linkend="_group___object_1ga8205c0d60a8139595d135d44316c9b67">daos_obj_anchor_split</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, uint32_t *nr, <link linkend="_structdaos__anchor__t">daos_anchor_t</link> *anchors)</para>
</listitem>
            <listitem><para>int <link linkend="_group___object_1gac457e7247ebdc4c8ae249ef8bbc12b19">daos_obj_anchor_set</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, uint32_t index, <link linkend="_structdaos__anchor__t">daos_anchor_t</link> *anchor)</para>
</listitem>
            <listitem><para>int <link linkend="_group___object_1ga87e98a32fdc4eacd5e2110ddb8ef1961">daos_oit_open</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> coh, <link linkend="_group___types_1gae363d5e93e32d7104d2bdaf97bfa5d61">daos_epoch_t</link> epoch, <link linkend="_structdaos__handle__t">daos_handle_t</link> *oh, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_group___object_1gad8a5e2d1d887e7faa702998ee58682d4">daos_oit_close</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> *ev)</para>
</listitem>
            <listitem><para>int <link linkend="_group___object_1gaae697c8131f256a918da1f630245abcf">daos_oit_list</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__obj__id__t">daos_obj_id_t</link> *oids, uint32_t *oids_nr, <link linkend="_structdaos__anchor__t">daos_anchor_t</link> *anchor, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> *ev)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_group___object_1ga913fdf50c37cc3794c0ceb51312c0466"/>static void <link linkend="_group___obj_class_1ga209e09a39a0f553b2c1e9a5f7f558e2e">daos_ofeat_t</link> <emphasis role="strong">ofeats</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_group___object_1ga1840fef39de5627243119228d88e3aed"/>static void <link linkend="_group___obj_class_1ga209e09a39a0f553b2c1e9a5f7f558e2e">daos_ofeat_t</link> <link linkend="_group___obj_class_1ga697f542a81cf2b46e3642a31ad289728">daos_oclass_id_t</link> <emphasis role="strong">cid</emphasis></para>
</listitem>
            <listitem><para>static void <link linkend="_group___obj_class_1ga209e09a39a0f553b2c1e9a5f7f558e2e">daos_ofeat_t</link> <link linkend="_group___obj_class_1ga697f542a81cf2b46e3642a31ad289728">daos_oclass_id_t</link> uint32_t <emphasis role="strong">args</emphasis></para>
</listitem>
            <listitem><para>oid hi &amp; <link linkend="_group___object_1ga33cf9f5c6cd1f55e3c9ab55c25c478be">hdr</link> = ((uint64_t)<link linkend="_group___object_1gaf6cf07da24f4d1d5d797c8dded3b9183">OID_FMT_VER</link> &lt;&lt; <link linkend="_group___object_1gab8ae2c87877cf92d74d2e98d531f3887">OID_FMT_VER_SHIFT</link>)</para>
</listitem>
            <listitem><para><anchor xml:id="_group___object_1ga3e47cb96fe9d5e9c2fd2148684947648"/>oid <emphasis role="strong">hi</emphasis> = <link linkend="_group___object_1ga33cf9f5c6cd1f55e3c9ab55c25c478be">hdr</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>(C) Copyright 2015-2021 Intel Corporation.</para>

<para>SPDX-License-Identifier: BSD-2-Clause-Patent </para>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_group___object_1ga57109faf60a87bdd6ac1b5653e0b2e45"/>    <section>
    <title>DAOS_IOMF_DETAIL</title>
<indexterm><primary>DAOS_IOMF_DETAIL</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_IOMF_DETAIL</secondary></indexterm>
<para><computeroutput>#define DAOS_IOMF_DETAIL   (0x1U)</computeroutput></para>
<para>I/O map flags - DAOS_IOMF_DETAIL zero means only need to know the iom_recx_hi/lo. 1 means need to retrieve detailed iom_recxs array, in that case user can either - 1) provides allocated iom_recxs buffer (iom_nr indicates #elements allocated), if returned iom_nr_out is greater than iom_nr, iom_recxs will still be populated, but it will be a truncated list). 2) provides NULL iod_recxs and zero iom_nr, in that case DAOS will internally allocated needed buffer for iom_recxs array (#elements is iom_nr, and equals iom_nr_out). User is responsible for free the iom_recxs buffer after using. </para>
<para>
Definition at line 245 of file daos_obj.h.</para>
    </section><anchor xml:id="_group___object_1ga894ef9dc89009c226ca921abca33571f"/>    <section>
    <title>IO_FLAGS_COND_BITS</title>
<indexterm><primary>IO_FLAGS_COND_BITS</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>IO_FLAGS_COND_BITS</secondary></indexterm>
<para><computeroutput>#define IO_FLAGS_COND_BITS   8</computeroutput></para>
<para>Number of bits reserved in IO flags bitmap for conditional checks. 
<literallayout>&#160;&#xa;</literallayout>
 </para>
<para>
Definition at line 90 of file daos_obj.h.</para>
    </section><anchor xml:id="_group___object_1gac1b5e80dc121f9be1cc4283cdea68bdc"/>    <section>
    <title>OID_FMT_CLASS_BITS</title>
<indexterm><primary>OID_FMT_CLASS_BITS</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>OID_FMT_CLASS_BITS</secondary></indexterm>
<para><computeroutput>#define OID_FMT_CLASS_BITS</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<link linkend="_group___object_1ga6e827318e60c8fb10f9f9a1743ffdeb5">OID_FMT_INTR_BITS</link>&#32;-&#32;<link linkend="_group___object_1ga9ad8f0c0ae7b7bb402fbe5e69a6c6990">OID_FMT_VER_BITS</link>&#32;-&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OID_FMT_FEAT_BITS)
</programlisting>
<para>Number of reserved by daos in object id for class id </para>
<para>
Definition at line 33 of file daos_obj.h.</para>
    </section><anchor xml:id="_group___object_1ga5b6e268ad436ce59a98b747f0fddea14"/>    <section>
    <title>OID_FMT_CLASS_MASK</title>
<indexterm><primary>OID_FMT_CLASS_MASK</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>OID_FMT_CLASS_MASK</secondary></indexterm>
<para><computeroutput>#define OID_FMT_CLASS_MASK   (<link linkend="_group___object_1gac363015d1bab238ef13ed3c29d56690c">OID_FMT_CLASS_MAX</link> &lt;&lt; <link linkend="_group___object_1gacd34f177e4efb7923a3a399c4aff7dc1">OID_FMT_CLASS_SHIFT</link>)</computeroutput></para>
<para>Mask for object class id </para>
<para>
Definition at line 55 of file daos_obj.h.</para>
    </section><anchor xml:id="_group___object_1gac363015d1bab238ef13ed3c29d56690c"/>    <section>
    <title>OID_FMT_CLASS_MAX</title>
<indexterm><primary>OID_FMT_CLASS_MAX</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>OID_FMT_CLASS_MAX</secondary></indexterm>
<para><computeroutput>#define OID_FMT_CLASS_MAX   ((1ULL &lt;&lt; <link linkend="_group___object_1gac1b5e80dc121f9be1cc4283cdea68bdc">OID_FMT_CLASS_BITS</link>) - 1)</computeroutput></para>
<para>Maximum valid object class setting </para>
<para>
Definition at line 48 of file daos_obj.h.</para>
    </section><anchor xml:id="_group___object_1gacd34f177e4efb7923a3a399c4aff7dc1"/>    <section>
    <title>OID_FMT_CLASS_SHIFT</title>
<indexterm><primary>OID_FMT_CLASS_SHIFT</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>OID_FMT_CLASS_SHIFT</secondary></indexterm>
<para><computeroutput>#define OID_FMT_CLASS_SHIFT   (<link linkend="_group___object_1gaeabb96073177cb5daaaaf5f833ab0d7f">OID_FMT_FEAT_SHIFT</link> - <link linkend="_group___object_1gac1b5e80dc121f9be1cc4283cdea68bdc">OID_FMT_CLASS_BITS</link>)</computeroutput></para>
<para>Bit shift for object class id in object id </para>
<para>
Definition at line 41 of file daos_obj.h.</para>
    </section><anchor xml:id="_group___object_1ga2a78a514cd805d1c12048159ffaf1308"/>    <section>
    <title>OID_FMT_FEAT_BITS</title>
<indexterm><primary>OID_FMT_FEAT_BITS</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>OID_FMT_FEAT_BITS</secondary></indexterm>
<para><computeroutput>#define OID_FMT_FEAT_BITS   16</computeroutput></para>
<para>Number of reserved by daos in object id for features </para>
<para>
Definition at line 31 of file daos_obj.h.</para>
    </section><anchor xml:id="_group___object_1ga75f02b5264ffa638d2f1add5f67d0b1c"/>    <section>
    <title>OID_FMT_FEAT_MASK</title>
<indexterm><primary>OID_FMT_FEAT_MASK</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>OID_FMT_FEAT_MASK</secondary></indexterm>
<para><computeroutput>#define OID_FMT_FEAT_MASK   (<link linkend="_group___object_1gaf4d0c03b791d27a49d9a1259b63fbb8d">OID_FMT_FEAT_MAX</link> &lt;&lt; <link linkend="_group___object_1gaeabb96073177cb5daaaaf5f833ab0d7f">OID_FMT_FEAT_SHIFT</link>)</computeroutput></para>
<para>Mask for object features </para>
<para>
Definition at line 53 of file daos_obj.h.</para>
    </section><anchor xml:id="_group___object_1gaf4d0c03b791d27a49d9a1259b63fbb8d"/>    <section>
    <title>OID_FMT_FEAT_MAX</title>
<indexterm><primary>OID_FMT_FEAT_MAX</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>OID_FMT_FEAT_MAX</secondary></indexterm>
<para><computeroutput>#define OID_FMT_FEAT_MAX   ((1ULL &lt;&lt; <link linkend="_group___object_1ga2a78a514cd805d1c12048159ffaf1308">OID_FMT_FEAT_BITS</link>) - 1)</computeroutput></para>
<para>Maximum valid object feature setting </para>
<para>
Definition at line 46 of file daos_obj.h.</para>
    </section><anchor xml:id="_group___object_1gaeabb96073177cb5daaaaf5f833ab0d7f"/>    <section>
    <title>OID_FMT_FEAT_SHIFT</title>
<indexterm><primary>OID_FMT_FEAT_SHIFT</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>OID_FMT_FEAT_SHIFT</secondary></indexterm>
<para><computeroutput>#define OID_FMT_FEAT_SHIFT   (<link linkend="_group___object_1gab8ae2c87877cf92d74d2e98d531f3887">OID_FMT_VER_SHIFT</link> - <link linkend="_group___object_1ga2a78a514cd805d1c12048159ffaf1308">OID_FMT_FEAT_BITS</link>)</computeroutput></para>
<para>Bit shift for object features in object id </para>
<para>
Definition at line 39 of file daos_obj.h.</para>
    </section><anchor xml:id="_group___object_1ga6e827318e60c8fb10f9f9a1743ffdeb5"/>    <section>
    <title>OID_FMT_INTR_BITS</title>
<indexterm><primary>OID_FMT_INTR_BITS</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>OID_FMT_INTR_BITS</secondary></indexterm>
<para><computeroutput>#define OID_FMT_INTR_BITS   32</computeroutput></para>
<para>32 bits for DAOS internal use </para>
<para>
Definition at line 27 of file daos_obj.h.</para>
    </section><anchor xml:id="_group___object_1gaf6cf07da24f4d1d5d797c8dded3b9183"/>    <section>
    <title>OID_FMT_VER</title>
<indexterm><primary>OID_FMT_VER</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>OID_FMT_VER</secondary></indexterm>
<para><computeroutput>#define OID_FMT_VER   1</computeroutput></para>
<para>the current OID version </para>
<para>
Definition at line 24 of file daos_obj.h.</para>
    </section><anchor xml:id="_group___object_1ga9ad8f0c0ae7b7bb402fbe5e69a6c6990"/>    <section>
    <title>OID_FMT_VER_BITS</title>
<indexterm><primary>OID_FMT_VER_BITS</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>OID_FMT_VER_BITS</secondary></indexterm>
<para><computeroutput>#define OID_FMT_VER_BITS   4</computeroutput></para>
<para>Number of reserved by daos in object id for version </para>
<para>
Definition at line 29 of file daos_obj.h.</para>
    </section><anchor xml:id="_group___object_1gae2aa3232b3d3b04255e28bd78965f242"/>    <section>
    <title>OID_FMT_VER_MASK</title>
<indexterm><primary>OID_FMT_VER_MASK</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>OID_FMT_VER_MASK</secondary></indexterm>
<para><computeroutput>#define OID_FMT_VER_MASK   (<link linkend="_group___object_1ga2c62d04c8ce286c4f27f6485a33a5b36">OID_FMT_VER_MAX</link> &lt;&lt; <link linkend="_group___object_1gab8ae2c87877cf92d74d2e98d531f3887">OID_FMT_VER_SHIFT</link>)</computeroutput></para>
<para>Mask for object version </para>
<para>
Definition at line 51 of file daos_obj.h.</para>
    </section><anchor xml:id="_group___object_1ga2c62d04c8ce286c4f27f6485a33a5b36"/>    <section>
    <title>OID_FMT_VER_MAX</title>
<indexterm><primary>OID_FMT_VER_MAX</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>OID_FMT_VER_MAX</secondary></indexterm>
<para><computeroutput>#define OID_FMT_VER_MAX   ((1ULL &lt;&lt; <link linkend="_group___object_1ga9ad8f0c0ae7b7bb402fbe5e69a6c6990">OID_FMT_VER_BITS</link>) - 1)</computeroutput></para>
<para>Maximum valid object version setting </para>
<para>
Definition at line 44 of file daos_obj.h.</para>
    </section><anchor xml:id="_group___object_1gab8ae2c87877cf92d74d2e98d531f3887"/>    <section>
    <title>OID_FMT_VER_SHIFT</title>
<indexterm><primary>OID_FMT_VER_SHIFT</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>OID_FMT_VER_SHIFT</secondary></indexterm>
<para><computeroutput>#define OID_FMT_VER_SHIFT   (64 - <link linkend="_group___object_1ga9ad8f0c0ae7b7bb402fbe5e69a6c6990">OID_FMT_VER_BITS</link>)</computeroutput></para>
<para>Bit shift for object version in object id </para>
<para>
Definition at line 37 of file daos_obj.h.</para>
</section>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="_group___object_1gadf764cbdea00d65edcd07bb9953ad2b7"/>    <section>
    <title>anonymous enum</title>
<para><computeroutput>anonymous enum</computeroutput></para><informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>DAOS_OF_DKEY_UINT64</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_OF_DKEY_UINT64</secondary></indexterm>
<anchor xml:id="_group___object_1ggadf764cbdea00d65edcd07bb9953ad2b7a87d90ee5b64d199f6c4a2ad3aecac857"/>DAOS_OF_DKEY_UINT64</entry><entry>
<para>DKEY keys not hashed and sorted numerically. Keys are accepted in client&apos;s byte order and DAOS is responsible for correct behavior </para>
</entry></row><row><entry><indexterm><primary>DAOS_OF_DKEY_LEXICAL</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_OF_DKEY_LEXICAL</secondary></indexterm>
<anchor xml:id="_group___object_1ggadf764cbdea00d65edcd07bb9953ad2b7abb97c9120a8f82c18740a78ff92e256a"/>DAOS_OF_DKEY_LEXICAL</entry><entry>
<para>DKEY keys not hashed and sorted lexically </para>
</entry></row><row><entry><indexterm><primary>DAOS_OF_AKEY_UINT64</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_OF_AKEY_UINT64</secondary></indexterm>
<anchor xml:id="_group___object_1ggadf764cbdea00d65edcd07bb9953ad2b7a50ae771152c6ccb1a574ec005a5f25b3"/>DAOS_OF_AKEY_UINT64</entry><entry>
<para>AKEY keys not hashed and sorted numerically. Keys are accepted in client&apos;s byte order and DAOS is responsible for correct behavior </para>
</entry></row><row><entry><indexterm><primary>DAOS_OF_AKEY_LEXICAL</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_OF_AKEY_LEXICAL</secondary></indexterm>
<anchor xml:id="_group___object_1ggadf764cbdea00d65edcd07bb9953ad2b7aa1b33921d7fa8f730a6b05a7e8d917e2"/>DAOS_OF_AKEY_LEXICAL</entry><entry>
<para>AKEY keys not hashed and sorted lexically </para>
</entry></row><row><entry><indexterm><primary>DAOS_OF_KV_FLAT</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_OF_KV_FLAT</secondary></indexterm>
<anchor xml:id="_group___object_1ggadf764cbdea00d65edcd07bb9953ad2b7ab1f5f48f233294b9e70d6ab758b3bd9c"/>DAOS_OF_KV_FLAT</entry><entry>
<para>reserved: 1-level flat KV store </para>
</entry></row><row><entry><indexterm><primary>DAOS_OF_ARRAY</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_OF_ARRAY</secondary></indexterm>
<anchor xml:id="_group___object_1ggadf764cbdea00d65edcd07bb9953ad2b7a9c99c37288abba0b7bc29f068cfc10e9"/>DAOS_OF_ARRAY</entry><entry>
<para>reserved: 1D Array with metadata stored in the DAOS object </para>
</entry></row><row><entry><indexterm><primary>DAOS_OF_ARRAY_MD</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_OF_ARRAY_MD</secondary></indexterm>
<anchor xml:id="_group___object_1ggadf764cbdea00d65edcd07bb9953ad2b7a36152105662c1ec1548d00920375f259"/>DAOS_OF_ARRAY_MD</entry><entry>
<para>reserved: Multi Dimensional Array </para>
</entry></row><row><entry><indexterm><primary>DAOS_OF_ARRAY_BYTE</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_OF_ARRAY_BYTE</secondary></indexterm>
<anchor xml:id="_group___object_1ggadf764cbdea00d65edcd07bb9953ad2b7aea33ee78663b48d6f2a935a62fa459ec"/>DAOS_OF_ARRAY_BYTE</entry><entry>
<para>reserved: Byte Array with no metadata (eg DFS/POSIX) </para>
</entry></row><row><entry><indexterm><primary>DAOS_OF_ECHO</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_OF_ECHO</secondary></indexterm>
<anchor xml:id="_group___object_1ggadf764cbdea00d65edcd07bb9953ad2b7ab9f7f1443d6959c29c8185d673ebc25a"/>DAOS_OF_ECHO</entry><entry>
<para>benchmark-only feature bit, I/O is a network echo, no data is going to be stored/returned</para>

<para>NB: this is the last feature bits. </para>
</entry></row><row><entry><indexterm><primary>DAOS_OF_MASK</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_OF_MASK</secondary></indexterm>
<anchor xml:id="_group___object_1ggadf764cbdea00d65edcd07bb9953ad2b7a7b52678d7be28cf9f836261f08aac2dd"/>DAOS_OF_MASK</entry><entry>
<para>Mask for convenience (16-bit) </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line 57 of file daos_obj.h.</para>
    </section><anchor xml:id="_group___object_1ga99fb83031ce9923c84392b4e92f956b5"/>    <section>
    <title>anonymous enum</title>
<para><computeroutput>anonymous enum</computeroutput></para><informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>DAOS_COND_MASK</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_COND_MASK</secondary></indexterm>
<anchor xml:id="_group___object_1gga99fb83031ce9923c84392b4e92f956b5a2edaa02e2234362dd2df9bf125bb952e"/>DAOS_COND_MASK</entry><entry>
<para>Mask for convenience </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line 92 of file daos_obj.h.</para>
    </section><anchor xml:id="_group___object_1gabc6126af1d45847bc59afa0aa3216b04"/>    <section>
    <title>anonymous enum</title>
<para><computeroutput>anonymous enum</computeroutput></para>
<para>Object open modes </para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>DAOS_OO_RO</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_OO_RO</secondary></indexterm>
<anchor xml:id="_group___object_1ggabc6126af1d45847bc59afa0aa3216b04a8a8a364caa60e6f62762da6418b34a2a"/>DAOS_OO_RO</entry><entry>
<para>Shared read </para>
</entry></row><row><entry><indexterm><primary>DAOS_OO_RW</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_OO_RW</secondary></indexterm>
<anchor xml:id="_group___object_1ggabc6126af1d45847bc59afa0aa3216b04a4b9ba12d229d218712918cba7567e467"/>DAOS_OO_RW</entry><entry>
<para>Shared read &amp; write, no cache for write </para>
</entry></row><row><entry><indexterm><primary>DAOS_OO_EXCL</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_OO_EXCL</secondary></indexterm>
<anchor xml:id="_group___object_1ggabc6126af1d45847bc59afa0aa3216b04a0d460d938b4b61391b641c0277c7023f"/>DAOS_OO_EXCL</entry><entry>
<para>Exclusive write, data can be cached </para>
</entry></row><row><entry><indexterm><primary>DAOS_OO_IO_RAND</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_OO_IO_RAND</secondary></indexterm>
<anchor xml:id="_group___object_1ggabc6126af1d45847bc59afa0aa3216b04a13a6ffa3e3e3848618e1ea42dfad6bbc"/>DAOS_OO_IO_RAND</entry><entry>
<para>unsupported: random I/O </para>
</entry></row><row><entry><indexterm><primary>DAOS_OO_IO_SEQ</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_OO_IO_SEQ</secondary></indexterm>
<anchor xml:id="_group___object_1ggabc6126af1d45847bc59afa0aa3216b04a19fb8bfc81d27cda38d0f123f42ee59b"/>DAOS_OO_IO_SEQ</entry><entry>
<para>unsupported: sequential I/O </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line 128 of file daos_obj.h.</para>
    </section><anchor xml:id="_group___object_1gadc29c2ff13d900c2f185ee95427fb06c"/>    <section>
    <title>anonymous enum</title>
<para><computeroutput>anonymous enum</computeroutput></para>
<para>record status </para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>DAOS_REC_ANY</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_REC_ANY</secondary></indexterm>
<anchor xml:id="_group___object_1ggadc29c2ff13d900c2f185ee95427fb06ca19c0e430fdf0522c1cb12f1fc6a4e3c9"/>DAOS_REC_ANY</entry><entry>
<para>Any record size, it is used by fetch </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line 285 of file daos_obj.h.</para>
    </section><anchor xml:id="_group___object_1ga61dadd085c1777f559549e05962b2c9e"/>    <section>
    <title>anonymous enum</title>
<para><computeroutput>anonymous enum</computeroutput></para>
<para>Mask for <link linkend="_group___object_1gab66aaecceb3b77c3bba57f1c0fe0e480">daos_obj_query_key()</link> flags to indicate what is being queried </para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>DAOS_GET_MAX</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_GET_MAX</secondary></indexterm>
<anchor xml:id="_group___object_1gga61dadd085c1777f559549e05962b2c9ea6dec2ecc39fcc27109275cbb78ab9a9e"/>DAOS_GET_MAX</entry><entry>
<para>retrieve the max of dkey, akey, and/or idx of array value </para>
</entry></row><row><entry><indexterm><primary>DAOS_GET_MIN</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_GET_MIN</secondary></indexterm>
<anchor xml:id="_group___object_1gga61dadd085c1777f559549e05962b2c9ea4b0331ebc729be6019155eb6fe259def"/>DAOS_GET_MIN</entry><entry>
<para>retrieve the min of dkey, akey, and/or idx of array value </para>
</entry></row><row><entry><indexterm><primary>DAOS_GET_DKEY</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_GET_DKEY</secondary></indexterm>
<anchor xml:id="_group___object_1gga61dadd085c1777f559549e05962b2c9ea0c6f937667919c33f24411b84d270c54"/>DAOS_GET_DKEY</entry><entry>
<para>retrieve the dkey </para>
</entry></row><row><entry><indexterm><primary>DAOS_GET_AKEY</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_GET_AKEY</secondary></indexterm>
<anchor xml:id="_group___object_1gga61dadd085c1777f559549e05962b2c9ea1f9bc2fa6a272d1e2ddbcef0c877ae31"/>DAOS_GET_AKEY</entry><entry>
<para>retrieve the akey </para>
</entry></row><row><entry><indexterm><primary>DAOS_GET_RECX</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_GET_RECX</secondary></indexterm>
<anchor xml:id="_group___object_1gga61dadd085c1777f559549e05962b2c9ea3029b65b94d748f583b6f22cc6a7ddfa"/>DAOS_GET_RECX</entry><entry>
<para>retrieve the idx of array value </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line 291 of file daos_obj.h.</para>
    </section><anchor xml:id="_group___object_1ga726ca809ffd3d67ab4b8476646f26635"/>    <section>
    <title>anonymous enum</title>
<para><computeroutput>anonymous enum</computeroutput></para>
<para>Flags for oclass hints </para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>DAOS_OCH_RDD_DEF</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_OCH_RDD_DEF</secondary></indexterm>
<anchor xml:id="_group___object_1gga726ca809ffd3d67ab4b8476646f26635a2cccf3a7298503e86a91688bfe09cda5"/>DAOS_OCH_RDD_DEF</entry><entry>
<para>Flags to control OC Redundancy </para>
</entry></row><row><entry><indexterm><primary>DAOS_OCH_RDD_NO</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_OCH_RDD_NO</secondary></indexterm>
<anchor xml:id="_group___object_1gga726ca809ffd3d67ab4b8476646f26635a4ccf3bb2b8990b78922f2e17e6a1cfc6"/>DAOS_OCH_RDD_NO</entry><entry>
<para>Default - use RF prop </para>
</entry></row><row><entry><indexterm><primary>DAOS_OCH_RDD_RP</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_OCH_RDD_RP</secondary></indexterm>
<anchor xml:id="_group___object_1gga726ca809ffd3d67ab4b8476646f26635a7d10aa59655cb3895c040682e9f20fc6"/>DAOS_OCH_RDD_RP</entry><entry>
<para>No redundancy </para>
</entry></row><row><entry><indexterm><primary>DAOS_OCH_RDD_EC</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_OCH_RDD_EC</secondary></indexterm>
<anchor xml:id="_group___object_1gga726ca809ffd3d67ab4b8476646f26635a9660ba1849177647df653bcb80ad0b2f"/>DAOS_OCH_RDD_EC</entry><entry>
<para>Replication </para>
</entry></row><row><entry><indexterm><primary>DAOS_OCH_SHD_DEF</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_OCH_SHD_DEF</secondary></indexterm>
<anchor xml:id="_group___object_1gga726ca809ffd3d67ab4b8476646f26635a2791d9cc44b9a44f4a308702da3b9c6d"/>DAOS_OCH_SHD_DEF</entry><entry>
<para>Erasure Code Flags to control OC Sharding </para>
</entry></row><row><entry><indexterm><primary>DAOS_OCH_SHD_TINY</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_OCH_SHD_TINY</secondary></indexterm>
<anchor xml:id="_group___object_1gga726ca809ffd3d67ab4b8476646f26635ae7509ceba642bb19c89403b5bd7e16fc"/>DAOS_OCH_SHD_TINY</entry><entry>
<para>Default: Use MAX for array &amp; flat KV; 1 grp for others. </para>
</entry></row><row><entry><indexterm><primary>DAOS_OCH_SHD_REG</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_OCH_SHD_REG</secondary></indexterm>
<anchor xml:id="_group___object_1gga726ca809ffd3d67ab4b8476646f26635a52ce9f92281ec35df0a095d18b4f3164"/>DAOS_OCH_SHD_REG</entry><entry>
<para>&lt;= 4 grps </para>
</entry></row><row><entry><indexterm><primary>DAOS_OCH_SHD_HI</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_OCH_SHD_HI</secondary></indexterm>
<anchor xml:id="_group___object_1gga726ca809ffd3d67ab4b8476646f26635af7baee844f762cc9cd5dcd5ab1861769"/>DAOS_OCH_SHD_HI</entry><entry>
<para>max(128, 25%) </para>
</entry></row><row><entry><indexterm><primary>DAOS_OCH_SHD_EXT</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_OCH_SHD_EXT</secondary></indexterm>
<anchor xml:id="_group___object_1gga726ca809ffd3d67ab4b8476646f26635a893cd553b0db274ef817d300d30cc49f"/>DAOS_OCH_SHD_EXT</entry><entry>
<para>max(256, 50%) </para>
</entry></row><row><entry><indexterm><primary>DAOS_OCH_SHD_MAX</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_OCH_SHD_MAX</secondary></indexterm>
<anchor xml:id="_group___object_1gga726ca809ffd3d67ab4b8476646f26635af56db904691343f0d38966e0424097bb"/>DAOS_OCH_SHD_MAX</entry><entry>
<para>max(1024, 80%) </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line 379 of file daos_obj.h.</para>
    </section><anchor xml:id="_group___object_1gab06c379248eb344585279218839d165a"/>    <section>
    <title>daos_iod_type_t</title>
<indexterm><primary>daos_iod_type_t</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>daos_iod_type_t</secondary></indexterm>
<para><computeroutput>enum <link linkend="_group___object_1gab06c379248eb344585279218839d165a">daos_iod_type_t</link></computeroutput></para>
<para>Type of the value accessed in an IOD </para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>DAOS_IOD_NONE</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_IOD_NONE</secondary></indexterm>
<anchor xml:id="_group___object_1ggab06c379248eb344585279218839d165aa610a5373995cf58d54b3a93338ef32bd"/>DAOS_IOD_NONE</entry><entry>
<para>is a dkey </para>
</entry></row><row><entry><indexterm><primary>DAOS_IOD_SINGLE</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_IOD_SINGLE</secondary></indexterm>
<anchor xml:id="_group___object_1ggab06c379248eb344585279218839d165aa62ea1db9eac42b49c5d31fcc1a04625e"/>DAOS_IOD_SINGLE</entry><entry>
<para>one indivisible value update atomically </para>
</entry></row><row><entry><indexterm><primary>DAOS_IOD_ARRAY</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>DAOS_IOD_ARRAY</secondary></indexterm>
<anchor xml:id="_group___object_1ggab06c379248eb344585279218839d165aacda4f32ddc3881026d2f01376c9f3b04"/>DAOS_IOD_ARRAY</entry><entry>
<para>an array of records where each record is update atomically </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line 182 of file daos_obj.h.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_group___object_1gac457e7247ebdc4c8ae249ef8bbc12b19"/>    <section>
    <title>daos_obj_anchor_set()</title>
<indexterm><primary>daos_obj_anchor_set</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>daos_obj_anchor_set</secondary></indexterm>
<para><computeroutput>int daos_obj_anchor_set (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, uint32_t index, <link linkend="_structdaos__anchor__t">daos_anchor_t</link> * anchor)</computeroutput></para>
<para>Set an anchor with an index based on split done with daos_obj_anchor_split. The anchor passed will be re-initialized and set to start and finish iteration based on the specified index.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>oh</entry>
                                <entry>
<para>Open object handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>index</entry>
                                <entry>
<para>Index of set this anchor for iteration. </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>anchor</entry>
                                <entry>
<para>Hash anchor to set.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned: 0 Success -DER_NO_HDL Invalid object open handle -DER_INVAL Invalid parameter </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___object_1ga8205c0d60a8139595d135d44316c9b67"/>    <section>
    <title>daos_obj_anchor_split()</title>
<indexterm><primary>daos_obj_anchor_split</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>daos_obj_anchor_split</secondary></indexterm>
<para><computeroutput>int daos_obj_anchor_split (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, uint32_t * nr, <link linkend="_structdaos__anchor__t">daos_anchor_t</link> * anchors)</computeroutput></para>
<para>Provide a function for objects to split an anchor to be able to execute a parallel listing/enumeration. This routine suggests the optimal number of anchors to use instead of just 1 and optionally returns all those anchors. The user would allocate the array of anchors after querying the number of anchors needed. Alternatively, user does not provide an array and can call <link linkend="_group___object_1gac457e7247ebdc4c8ae249ef8bbc12b19">daos_obj_anchor_set()</link> for every anchor to set.</para>

<para>The user could suggest how many anchors to split the iteration over. This feature is not supported yet.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>oh</entry>
                                <entry>
<para>Open object handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>                                </entry>                                <entry>[in/out]</entry>
                                <entry>
<para>nr [in]: Number of anchors requested and allocated in <emphasis>anchors</emphasis>. Pass 0 for DAOS to recommend split num. [out]: Number of anchors recommended if 0 is passed in. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>anchors</entry>
                                <entry>
<para>Optional array of anchors that are split.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned: 0 Success -DER_NO_HDL Invalid object open handle -DER_INVAL Invalid parameter </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___object_1gaa928f6519b3f182d81f69db5d081be8f"/>    <section>
    <title>daos_obj_close()</title>
<indexterm><primary>daos_obj_close</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>daos_obj_close</secondary></indexterm>
<para><computeroutput>int daos_obj_close (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> * ev)</computeroutput></para>
<para>Close an opened object.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>oh</entry>
                                <entry>
<para>Object open handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. Function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned by <emphasis>ev::ev_error</emphasis> in non-blocking mode: 0 Success -DER_NO_HDL Invalid object open handle </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___object_1ga28d71e7752659a6dd9062a59e7345214"/>    <section>
    <title>daos_obj_fetch()</title>
<indexterm><primary>daos_obj_fetch</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>daos_obj_fetch</secondary></indexterm>
<para><computeroutput>int daos_obj_fetch (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, uint64_t flags, daos_key_t * dkey, unsigned int nr, <link linkend="_structdaos__iod__t">daos_iod_t</link> * iods, d_sg_list_t * sgls, <link linkend="_structdaos__iom__t">daos_iom_t</link> * ioms, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> * ev)</computeroutput></para>
<para>Fetch object records from co-located arrays.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>oh</entry>
                                <entry>
<para>Object open handle.</para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>th</entry>
                                <entry>
<para>Optional transaction handle to fetch with. Use DAOS_TX_NONE for an independent transaction.</para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>flags</entry>
                                <entry>
<para>Fetch flags (conditional ops).</para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>dkey</entry>
                                <entry>
<para>Distribution key associated with the fetch operation.</para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>nr</entry>
                                <entry>
<para>Number of I/O descriptor and scatter/gather lists in respectively <emphasis>iods</emphasis> and <emphasis>sgls</emphasis>.</para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>iods</entry>
                                <entry>
<para>[in]: Array of I/O descriptors. Each descriptor is associated with a given akey and describes the list of record extents to fetch from the array. [out]: Checksum of each extent is returned via <emphasis>iods</emphasis>[]::iod_csums[]. If the record size of an extent is unknown (i.e. set to DAOS_REC_ANY as input), then the actual record size will be returned in <emphasis>iods</emphasis>[]::iod_size.</para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>sgls</entry>
                                <entry>
<para>Scatter/gather lists (sgl) to store records. Each array is associated with a separate sgl in <emphasis>sgls</emphasis>. I/O descs in each sgl can be arbitrary as long as their total size is sufficient to fill in all returned data. For example, extents with records of different sizes can be adjacently stored in the same iod of the sgl of the I/O descriptor start offset of an extent is the end offset of the previous extent. For an unfound record, the output length of the corresponding sgl is set to zero.</para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>ioms</entry>
                                <entry>
<para>Optional, upper layers can simply pass in NULL. It is the sink buffer to store the returned actual layout of the iods used in fetch. It gives information for every iod on the highest/lowest extent in that dkey, in additional to the valid extents from the ones fetched (if asked for). If the extents don&apos;t fit in the io_map, the number required is set on the fetch in <emphasis>ioms</emphasis>[]::iom_nr for that particular iod.</para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. Function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned by <emphasis>ev::ev_error</emphasis> in non-blocking mode: 0 Success -DER_NO_HDL Invalid object open handle -DER_INVAL Invalid parameter -DER_UNREACH Network is unreachable -DER_REC2BIG Record is too large and can&apos;t be fit into output buffer -DER_EP_OLD Epoch is too old and has no data </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___object_1ga6a254a72b728607b212850f0eefcdff4"/>    <section>
    <title>daos_obj_generate_oid()</title>
<indexterm><primary>daos_obj_generate_oid</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>daos_obj_generate_oid</secondary></indexterm>
<para><computeroutput>int daos_obj_generate_oid (<link linkend="_structdaos__handle__t">daos_handle_t</link> coh, <link linkend="_structdaos__obj__id__t">daos_obj_id_t</link> * oid, <link linkend="_group___obj_class_1ga209e09a39a0f553b2c1e9a5f7f558e2e">daos_ofeat_t</link> ofeats, <link linkend="_group___obj_class_1ga697f542a81cf2b46e3642a31ad289728">daos_oclass_id_t</link> cid, <link linkend="_group___obj_class_1ga3b8f3311463c936d904f349c817862f1">daos_oclass_hints_t</link> hints, uint32_t args)</computeroutput></para>
<para>Generate a DAOS object ID by encoding the private DAOS bits of the object address space. This allows the user to either select an object class manually, or ask DAOS to generate one based on some hints provided.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>coh</entry>
                                <entry>
<para>Container open handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>oid</entry>
                                <entry>
<para>[in]: Object ID with low 96 bits set and unique inside the container. [out]: Fully populated DAOS object identifier with the the low 96 bits untouched and the DAOS private bits (the high 32 bits) encoded. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ofeats</entry>
                                <entry>
<para>Feature bits specific to object </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>cid</entry>
                                <entry>
<para>Class Identifier. This setting is for advanced users who are knowledgeable on the specific oclass being set and what that means for the object in the current system and the container it&apos;s in. Setting this to 0 (unknown) will check if there are any hints specified and use an oclass accordingly. If there are no hints specified we use the container properties to select the object class. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>hints</entry>
                                <entry>
<para>Optional hints to select oclass with redundancy type and sharding. This will be ignored if cid is not OC_UNKNOWN (0). </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>args</entry>
                                <entry>
<para>Reserved. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_group___object_1gac0d8c82eca4c1d3532f797d4f0b9f4b7"/>    <section>
    <title>daos_obj_list_akey()</title>
<indexterm><primary>daos_obj_list_akey</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>daos_obj_list_akey</secondary></indexterm>
<para><computeroutput>int daos_obj_list_akey (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, daos_key_t * dkey, uint32_t * nr, <link linkend="_structdaos__key__desc__t">daos_key_desc_t</link> * kds, d_sg_list_t * sgl, <link linkend="_structdaos__anchor__t">daos_anchor_t</link> * anchor, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> * ev)</computeroutput></para>
<para>Attribute key enumeration.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>oh</entry>
                                <entry>
<para>Object open handle.</para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>th</entry>
                                <entry>
<para>Optional transaction handle to enumerate with. Use DAOS_TX_NONE for an independent transaction.</para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>dkey</entry>
                                <entry>
<para>distribution key for the akey enumeration</para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>nr</entry>
                                <entry>
<para>[in]: number of key descriptors in <emphasis>kds</emphasis>. [out]: number of returned key descriptors.</para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>kds</entry>
                                <entry>
<para>[in]: preallocated array of \nr key descriptors. [out]: size of each individual key in <emphasis>sgl</emphasis>.</para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>sgl</entry>
                                <entry>
<para>Scatter/gather list to store the akey list. All akeys are written contiguously, actual boundaries can be calculated thanks to <emphasis>kds</emphasis>.</para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>anchor</entry>
                                <entry>
<para>Hash anchor for the next call, it should be set to zeroes for the first call, it should not be changed by caller between calls.</para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. Function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned by <emphasis>ev::ev_error</emphasis> in non-blocking mode: 0 Success -DER_NO_HDL Invalid object open handle -DER_INVAL Invalid parameter -DER_UNREACH Network is unreachable -DER_KEY2BIG Key is too large and can&apos;t be fit into the <emphasis>sgl</emphasis>, the required minimal length to fit the key is returned by <emphasis>kds</emphasis>[0].kd_key_len. This error code only returned for the first key in this enumeration, then user can provide a larger buffer (for example two or three times <emphasis>kds</emphasis>[0].kd_key_len) and do the enumerate again. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___object_1gab1191b15617a670ab7af8a4a9466c263"/>    <section>
    <title>daos_obj_list_dkey()</title>
<indexterm><primary>daos_obj_list_dkey</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>daos_obj_list_dkey</secondary></indexterm>
<para><computeroutput>int daos_obj_list_dkey (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, uint32_t * nr, <link linkend="_structdaos__key__desc__t">daos_key_desc_t</link> * kds, d_sg_list_t * sgl, <link linkend="_structdaos__anchor__t">daos_anchor_t</link> * anchor, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> * ev)</computeroutput></para>
<para>Distribution key enumeration.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>oh</entry>
                                <entry>
<para>Object open handle.</para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>th</entry>
                                <entry>
<para>Optional transaction handle to enumerate with. Use DAOS_TX_NONE for an independent transaction.</para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>nr</entry>
                                <entry>
<para>[in]: number of key descriptors in <emphasis>kds</emphasis>. [out]: number of returned key descriptors.</para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>kds</entry>
                                <entry>
<para>[in]: preallocated array of \nr key descriptors. [out]: size of each individual key along with checksum type and size stored just after the key in <emphasis>sgl</emphasis>.</para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>sgl</entry>
                                <entry>
<para>Scatter/gather list to store the dkey list. All dkeys are written contiguously with their checksum, actual boundaries can be calculated thanks to <emphasis>kds</emphasis>.</para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>anchor</entry>
                                <entry>
<para>Hash anchor for the next call, it should be set to zeroes for the first call, it should not be changed by caller between calls.</para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. Function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned by <emphasis>ev::ev_error</emphasis> in non-blocking mode: 0 Success -DER_NO_HDL Invalid object open handle -DER_INVAL Invalid parameter -DER_UNREACH Network is unreachable -DER_KEY2BIG Key is too large and can&apos;t be fit into the <emphasis>sgl</emphasis>, the required minimal length to fit the key is returned by <emphasis>kds</emphasis>[0].kd_key_len. This error code only returned for the first key in this enumeration, then user can provide a larger buffer (for example two or three times <emphasis>kds</emphasis>[0].kd_key_len) and do the enumerate again. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___object_1gaeb05e2d9823ec30a8fa6997f5f549714"/>    <section>
    <title>daos_obj_list_recx()</title>
<indexterm><primary>daos_obj_list_recx</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>daos_obj_list_recx</secondary></indexterm>
<para><computeroutput>int daos_obj_list_recx (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, daos_key_t * dkey, daos_key_t * akey, <link linkend="_group___types_1gaef45c835fcfbd5f969030fd7c854eb8a">daos_size_t</link> * size, uint32_t * nr, <link linkend="_structdaos__recx__t">daos_recx_t</link> * recxs, <link linkend="_structdaos__epoch__range__t">daos_epoch_range_t</link> * eprs, <link linkend="_structdaos__anchor__t">daos_anchor_t</link> * anchor, bool incr_order, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> * ev)</computeroutput></para>
<para>Extent enumeration of valid records in the array.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>oh</entry>
                                <entry>
<para>Object open handle.</para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>th</entry>
                                <entry>
<para>Optional transaction handle to enumerate with. Use DAOS_TX_NONE for an independent transaction.</para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>dkey</entry>
                                <entry>
<para>distribution key for the enumeration</para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>akey</entry>
                                <entry>
<para>attribute key for the enumeration</para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>size</entry>
                                <entry>
<para>record size</para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>nr</entry>
                                <entry>
<para>[in]: number of records in <emphasis>recxs</emphasis>. [out]: number of returned recxs.</para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>recxs</entry>
                                <entry>
<para>[in]: preallocated array of \nr records. [out]: returned records.</para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>eprs</entry>
                                <entry>
<para>[in]: preallocated array of \nr epoch ranges. [out]: returned epoch ranges.</para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>anchor</entry>
                                <entry>
<para>Hash anchor for the next call, it should be set to zeroes for the first call, it should not be changed by caller between calls.</para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>incr_order</entry>
                                <entry>
<para>If this is set to true, extents will be listed in increasing index order, otherwise if false, they are listed in decreasing order. Once an anchor is associated with an order, further calls with that anchor should use the same order setting.</para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. Function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned by <emphasis>ev::ev_error</emphasis> in non-blocking mode: 0 Success -DER_NO_HDL Invalid object open handle -DER_INVAL Invalid parameter -DER_UNREACH Network is unreachable </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___object_1ga34c5792cce236833d0534f54b32b952a"/>    <section>
    <title>daos_obj_open()</title>
<indexterm><primary>daos_obj_open</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>daos_obj_open</secondary></indexterm>
<para><computeroutput>int daos_obj_open (<link linkend="_structdaos__handle__t">daos_handle_t</link> coh, <link linkend="_structdaos__obj__id__t">daos_obj_id_t</link> oid, unsigned int mode, <link linkend="_structdaos__handle__t">daos_handle_t</link> * oh, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> * ev)</computeroutput></para>
<para>Open an DAOS object.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>coh</entry>
                                <entry>
<para>Container open handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>oid</entry>
                                <entry>
<para>Object ID. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>mode</entry>
                                <entry>
<para>Open mode: DAOS_OO_RO/RW/EXCL/IO_RAND/IO_SEQ </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>oh</entry>
                                <entry>
<para>Returned object open handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. The function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned by <emphasis>ev::ev_error</emphasis> in non-blocking mode: 0 Success -DER_NO_HDL Invalid container handle -DER_INVAL Invalid parameter -DER_UNREACH Network is unreachable -DER_NO_PERM Permission denied -DER_NONEXIST Cannot find object -DER_EP_OLD Epoch is too old and has no data for this object </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___object_1ga908f76eaa33ae21cd835ab585804eca9"/>    <section>
    <title>daos_obj_punch()</title>
<indexterm><primary>daos_obj_punch</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>daos_obj_punch</secondary></indexterm>
<para><computeroutput>int daos_obj_punch (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, uint64_t flags, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> * ev)</computeroutput></para>
<para>Punch an entire object with all keys associated with it.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>oh</entry>
                                <entry>
<para>Object open handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>th</entry>
                                <entry>
<para>Optional transaction handle to punch object in. Use DAOS_TX_NONE for an independent transaction. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>flags</entry>
                                <entry>
<para>Punch flags (currently ignored). </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. Function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned by <emphasis>ev::ev_error</emphasis> in non-blocking mode: 0 Success -DER_NO_HDL Invalid object open handle -DER_UNREACH Network is unreachable -DER_EP_RO Permission denied -DER_NOEXIST Nonexistent object ID -DER_EP_OLD Related RPC is resent too late as to related resent history may have been aggregated. Punch result is undefined. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___object_1gafd35212c3ba43f1263b319bdd5271db7"/>    <section>
    <title>daos_obj_punch_akeys()</title>
<indexterm><primary>daos_obj_punch_akeys</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>daos_obj_punch_akeys</secondary></indexterm>
<para><computeroutput>int daos_obj_punch_akeys (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, uint64_t flags, daos_key_t * dkey, unsigned int nr, daos_key_t * akeys, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> * ev)</computeroutput></para>
<para>Punch akeys (with all records) from an object.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>oh</entry>
                                <entry>
<para>Object open handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>th</entry>
                                <entry>
<para>Optional transaction handle to punch akeys in. Use DAOS_TX_NONE for an independent transaction. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>flags</entry>
                                <entry>
<para>Punch flags (conditional ops). </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>dkey</entry>
                                <entry>
<para>dkey to punch akeys from. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>nr</entry>
                                <entry>
<para>number of akeys to punch. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>akeys</entry>
                                <entry>
<para>Array of akeys to punch. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. Function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned by <emphasis>ev::ev_error</emphasis> in non-blocking mode: 0 Success -DER_NO_HDL Invalid object open handle -DER_UNREACH Network is unreachable -DER_EP_RO Permission denied -DER_NOEXIST Nonexistent object ID -DER_EP_OLD Related RPC is resent too late as to related resent history may have been aggregated. Punch result is undefined. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___object_1gafeb0492149d0989edb60e4e68bffadcf"/>    <section>
    <title>daos_obj_punch_dkeys()</title>
<indexterm><primary>daos_obj_punch_dkeys</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>daos_obj_punch_dkeys</secondary></indexterm>
<para><computeroutput>int daos_obj_punch_dkeys (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, uint64_t flags, unsigned int nr, daos_key_t * dkeys, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> * ev)</computeroutput></para>
<para>Punch dkeys (with all akeys) from an object.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>oh</entry>
                                <entry>
<para>Object open handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>th</entry>
                                <entry>
<para>Optional transaction handle to punch dkeys in. Use DAOS_TX_NONE for an independent transaction. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>flags</entry>
                                <entry>
<para>Punch flags (conditional ops). </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>nr</entry>
                                <entry>
<para>number of dkeys to punch. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>dkeys</entry>
                                <entry>
<para>Array of dkeys to punch. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. Function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned by <emphasis>ev::ev_error</emphasis> in non-blocking mode: 0 Success -DER_NO_HDL Invalid object open handle -DER_UNREACH Network is unreachable -DER_EP_RO Permission denied -DER_NOEXIST Nonexistent object ID -DER_EP_OLD Related RPC is resent too late as to related resent history may have been aggregated. Punch result is undefined. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___object_1ga92102450d9f5a985b65b663f25502c30"/>    <section>
    <title>daos_obj_query()</title>
<indexterm><primary>daos_obj_query</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>daos_obj_query</secondary></indexterm>
<para><computeroutput>int daos_obj_query (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, struct <link linkend="_structdaos__obj__attr">daos_obj_attr</link> * oa, d_rank_list_t * ranks, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> * ev)</computeroutput></para>
<para>Query attributes of an object. Caller should provide at least one of the output parameters.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>oh</entry>
                                <entry>
<para>Object open handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>oa</entry>
                                <entry>
<para>Returned object attributes. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>ranks</entry>
                                <entry>
<para>Ordered list of ranks where the object is stored. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. The function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned by <emphasis>ev::ev_error</emphasis> in non-blocking mode: 0 Success -DER_NO_HDL Invalid object open handle -DER_INVAL Invalid parameter -DER_UNREACH Network is unreachable </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___object_1gab66aaecceb3b77c3bba57f1c0fe0e480"/>    <section>
    <title>daos_obj_query_key()</title>
<indexterm><primary>daos_obj_query_key</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>daos_obj_query_key</secondary></indexterm>
<para><computeroutput>int daos_obj_query_key (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, uint64_t flags, daos_key_t * dkey, daos_key_t * akey, <link linkend="_structdaos__recx__t">daos_recx_t</link> * recx, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> * ev)</computeroutput></para>
<para>Retrieve the largest or smallest integer DKEY, AKEY, and array offset from an object. If object does not have an array value, 0 is returned in extent. User has to specify what is being queried (dkey, akey, and/or recx) along with the query type (max or min) in flags. If one of those is not provided the function will fail. If the dkey or akey are not being queried, there value must be provided by the user.</para>

<para>If searching in a particular dkey for the max akey and max offset in that akey, user would supply the dkey value and a flag of: DAOS_GET_MAX | DAOS_GET_AKEY | DAOS_GET_RECX.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>oh</entry>
                                <entry>
<para>Object open handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>th</entry>
                                <entry>
<para>Optional transaction handle to query at. Use DAOS_TX_NONE for an independent transaction. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>flags</entry>
                                <entry>
<para>mask with the following options: DAOS_GET_DKEY, DAOS_GET_AKEY, DAOS_GET_RECX, DAOS_GET_MAX, DAOS_GET_MIN User has to indicate whether to query the MAX or MIN, in addition to what needs to be queried. Providing (MAX | MIN) in any combination will return an error. i.e. user can only query MAX or MIN in one call. </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>dkey</entry>
                                <entry>
<para>[in]: allocated integer dkey. User can provide the dkey if not querying the max or min dkey. [out]: max or min dkey (if flag includes dkey query). </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>akey</entry>
                                <entry>
<para>[in]: allocated integer akey. User can provide the akey if not querying the max or min akey. [out]: max or min akey (if flag includes akey query). </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>recx</entry>
                                <entry>
<para>max or min offset in dkey/akey, and the size of the extent at the offset. If there are no visible array records, the size in the recx returned will be 0. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. Function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned by <emphasis>ev::ev_error</emphasis> in non-blocking mode: 0 Success -DER_NO_HDL Invalid object open handle -DER_INVAL Invalid parameter -DER_UNREACH Network is unreachable </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___object_1ga562cff4284985245e07a691ec3769314"/>    <section>
    <title>daos_obj_update()</title>
<indexterm><primary>daos_obj_update</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>daos_obj_update</secondary></indexterm>
<para><computeroutput>int daos_obj_update (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__handle__t">daos_handle_t</link> th, uint64_t flags, daos_key_t * dkey, unsigned int nr, <link linkend="_structdaos__iod__t">daos_iod_t</link> * iods, d_sg_list_t * sgls, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> * ev)</computeroutput></para>
<para>Insert or update object records stored in co-located arrays.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>oh</entry>
                                <entry>
<para>Object open handle.</para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>th</entry>
                                <entry>
<para>Optional transaction handle to update with. Use DAOS_TX_NONE for an independent transaction.</para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>flags</entry>
                                <entry>
<para>Update flags (conditional ops).</para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>dkey</entry>
                                <entry>
<para>Distribution key associated with the update operation.</para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>nr</entry>
                                <entry>
<para>Number of descriptors and scatter/gather lists in respectively <emphasis>iods</emphasis> and <emphasis>sgls</emphasis>.</para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>iods</entry>
                                <entry>
<para>Array of I/O descriptor. Each descriptor is associated with an array identified by its akey and describes the list of record extent to update. Checksum of each record extent is stored in <emphasis>iods</emphasis>[]::iod_csums[]. If the record size of an extent is zero, then it is effectively a punch for the specified index range.</para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>sgls</entry>
                                <entry>
<para>Scatter/gather list (sgl) to store the input data records. Each I/O descriptor owns a separate sgl in <emphasis>sgls</emphasis>. Different records of the same extent can either be stored in separate iod of the sgl, or contiguously stored in arbitrary iods as long as total buffer size can match the total extent size.</para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. Function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned by <emphasis>ev::ev_error</emphasis> in non-blocking mode: 0 Success -DER_NO_HDL Invalid object open handle -DER_INVAL Invalid parameter -DER_REC2BIG Record is larger than the buffer in input <emphasis>sgls</emphasis> buffer. -DER_NO_PERM Permission denied -DER_UNREACH Network is unreachable -DER_EP_RO Epoch is read-only -DER_EP_OLD Related RPC is resent too late as to related resent history may have been aggregated. Update result is undefined. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___object_1ga0ba9dce86987ab42fe63fd94dda297ea"/>    <section>
    <title>daos_obj_verify()</title>
<indexterm><primary>daos_obj_verify</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>daos_obj_verify</secondary></indexterm>
<para><computeroutput>int daos_obj_verify (<link linkend="_structdaos__handle__t">daos_handle_t</link> coh, <link linkend="_structdaos__obj__id__t">daos_obj_id_t</link> oid, <link linkend="_group___types_1gae363d5e93e32d7104d2bdaf97bfa5d61">daos_epoch_t</link> epoch)</computeroutput></para>
<para>Verify object data consistency against the specified epoch.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>coh</entry>
                                <entry>
<para>Container open handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>oid</entry>
                                <entry>
<para>Object ID. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>epoch</entry>
                                <entry>
<para>The (stable) epoch against that the verification will be done. DAOS_EPOCH_MAX means current highest epoch.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 Success and consistent -DER_UNREACH Network is unreachable -DER_NO_HDL Invalid object open handle -DER_MISMATCH Found data inconsistency </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___object_1gad8a5e2d1d887e7faa702998ee58682d4"/>    <section>
    <title>daos_oit_close()</title>
<indexterm><primary>daos_oit_close</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>daos_oit_close</secondary></indexterm>
<para><computeroutput>int daos_oit_close (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> * ev)</computeroutput></para>
<para>Close an opened Object Index Table (OIT).</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>oh</entry>
                                <entry>
<para>OIT open handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. Function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned by <emphasis>ev::ev_error</emphasis> in non-blocking mode: 0 Success -DER_NO_HDL Invalid object open handle </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___object_1gaae697c8131f256a918da1f630245abcf"/>    <section>
    <title>daos_oit_list()</title>
<indexterm><primary>daos_oit_list</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>daos_oit_list</secondary></indexterm>
<para><computeroutput>int daos_oit_list (<link linkend="_structdaos__handle__t">daos_handle_t</link> oh, <link linkend="_structdaos__obj__id__t">daos_obj_id_t</link> * oids, uint32_t * oids_nr, <link linkend="_structdaos__anchor__t">daos_anchor_t</link> * anchor, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> * ev)</computeroutput></para>
<para>Enumerate object IDs snapshotted by the Object Index Table (OIT)</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>oh</entry>
                                <entry>
<para>OIT open handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>oids</entry>
                                <entry>
<para>Returned OIDs </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>oids_nr</entry>
                                <entry>
<para>Number of returned OIDs </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>anchor</entry>
                                <entry>
<para>Hash anchor for the next call, it should be set to zeroes for the first call, it should not be changed by caller between calls. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. Function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned by <emphasis>ev::ev_error</emphasis> in non-blocking mode: 0 Success -DER_NO_HDL Invalid object open handle -DER_INVAL Invalid parameter </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___object_1ga87e98a32fdc4eacd5e2110ddb8ef1961"/>    <section>
    <title>daos_oit_open()</title>
<indexterm><primary>daos_oit_open</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>daos_oit_open</secondary></indexterm>
<para><computeroutput>int daos_oit_open (<link linkend="_structdaos__handle__t">daos_handle_t</link> coh, <link linkend="_group___types_1gae363d5e93e32d7104d2bdaf97bfa5d61">daos_epoch_t</link> epoch, <link linkend="_structdaos__handle__t">daos_handle_t</link> * oh, <link linkend="_group___types_1ga7e4095443fd42c3411ed0bd000cc9c20">daos_event_t</link> * ev)</computeroutput></para>
<para>Open Object Index Table (OIT) of an container</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>coh</entry>
                                <entry>
<para>Container open handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>epoch</entry>
                                <entry>
<para>epoch of a snapshot </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>oh</entry>
                                <entry>
<para>Returned OIT open handle. </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>ev</entry>
                                <entry>
<para>Completion event, it is optional and can be NULL. The function will run in blocking mode if <emphasis>ev</emphasis> is NULL.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>These values will be returned by <emphasis>ev::ev_error</emphasis> in non-blocking mode: 0 Success -DER_NO_HDL Invalid container handle -DER_INVAL Invalid parameter </para>
</formalpara>
</para>
</section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_group___object_1ga85bb20ecd625a879285818946c5f153f"/>    <section>
    <title>args</title>
<indexterm><primary>args</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>args</secondary></indexterm>
<para><computeroutput>void <link linkend="_group___obj_class_1ga209e09a39a0f553b2c1e9a5f7f558e2e">daos_ofeat_t</link> <link linkend="_group___obj_class_1ga697f542a81cf2b46e3642a31ad289728">daos_oclass_id_t</link> uint32_t args</computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting>{
&#32;&#32;&#32;&#32;uint64_t&#32;<link linkend="_group___object_1ga33cf9f5c6cd1f55e3c9ab55c25c478be">hdr</link>
</programlisting><para>
Definition at line 334 of file daos_obj.h.</para>
    </section><anchor xml:id="_group___object_1ga33cf9f5c6cd1f55e3c9ab55c25c478be"/>    <section>
    <title>hdr</title>
<indexterm><primary>hdr</primary><secondary>DAOS Object</secondary></indexterm>
<indexterm><primary>DAOS Object</primary><secondary>hdr</secondary></indexterm>
<para><computeroutput>hdr = ((uint64_t)<link linkend="_group___object_1gaf6cf07da24f4d1d5d797c8dded3b9183">OID_FMT_VER</link> &lt;&lt; <link linkend="_group___object_1gab8ae2c87877cf92d74d2e98d531f3887">OID_FMT_VER_SHIFT</link>)</computeroutput></para>
<para>| Upper bits contain | OID_FMT_VER_BITS (version) | | OID_FMT_FEAT_BITS (object features) | | OID_FMT_CLASS_BITS (object class) | | 96-bit for upper layer ... | </para>
<para>
Definition at line 348 of file daos_obj.h.</para>
</section>
</section>
</section>
