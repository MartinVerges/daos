<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group___u_n_s">
<title>DAOS UNS</title>
<indexterm><primary>DAOS UNS</primary></indexterm>
<simplesect>
    <title>Data Structures    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_structduns__attr__t">duns_attr_t</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_group___u_n_s_1gaae9d29885dfb321968f20d86baff6e48">DUNS_XATTR_NAME</link>   &quot;user.daos&quot;</para>
</listitem>
            <listitem><para>#define <link linkend="_group___u_n_s_1ga5358fccff57eb95f1cce94c2ad65becf">DUNS_MAX_XATTR_LEN</link>   170</para>
</listitem>
            <listitem><para><anchor xml:id="_group___u_n_s_1ga958a18f280f87a719addfe31f31aeaf2"/>#define <emphasis role="strong">DUNS_XATTR_FMT</emphasis>   &quot;DAOS.%s://%36s/%36s&quot;</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum { <emphasis role="strong">DUNS_NO_PREFIX</emphasis> = (1 &lt;&lt; 0), 
<emphasis role="strong">DUNS_NO_REVERSE_LOOKUP</emphasis> = (1 &lt;&lt; 1), 
<emphasis role="strong">DUNS_NO_CHECK_PATH</emphasis> = (1 &lt;&lt; 2)
 }</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>int <link linkend="_group___u_n_s_1gaed5d956858070fac62f6effe9c6540e1">duns_create_path</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> poh, const char *path, struct <link linkend="_structduns__attr__t">duns_attr_t</link> *attrp)</para>
</listitem>
            <listitem><para>int <link linkend="_group___u_n_s_1gabdbf8f5eb7ab131249f3675fc1b3c653">duns_resolve_path</link> (const char *path, struct <link linkend="_structduns__attr__t">duns_attr_t</link> *attr)</para>
</listitem>
            <listitem><para>int <link linkend="_group___u_n_s_1ga5cd91a183d4b7ccf5d948739dff143c4">duns_destroy_path</link> (<link linkend="_structdaos__handle__t">daos_handle_t</link> poh, const char *path)</para>
</listitem>
            <listitem><para>int <link linkend="_group___u_n_s_1ga678a3b99eceb1403bae24b874e45d8fd">duns_parse_attr</link> (char *str, <link linkend="_group___types_1gaef45c835fcfbd5f969030fd7c854eb8a">daos_size_t</link> len, struct <link linkend="_structduns__attr__t">duns_attr_t</link> *attr)</para>
</listitem>
            <listitem><para>int <link linkend="_group___u_n_s_1ga20cba354b6b1d19ed5ba3e36530e293d">duns_set_sys_name</link> (struct <link linkend="_structduns__attr__t">duns_attr_t</link> *attrp, const char *sys)</para>
</listitem>
            <listitem><para>void <link linkend="_group___u_n_s_1ga48aea4ccb3ac85b26f186daa47d98654">duns_destroy_attr</link> (struct <link linkend="_structduns__attr__t">duns_attr_t</link> *attrp)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_group___u_n_s_1ga5358fccff57eb95f1cce94c2ad65becf"/>    <section>
    <title>DUNS_MAX_XATTR_LEN</title>
<indexterm><primary>DUNS_MAX_XATTR_LEN</primary><secondary>DAOS UNS</secondary></indexterm>
<indexterm><primary>DAOS UNS</primary><secondary>DUNS_MAX_XATTR_LEN</secondary></indexterm>
<para><computeroutput>#define DUNS_MAX_XATTR_LEN   170</computeroutput></para>
<para>Length of the extended attribute </para>
<para>
Definition at line 125 of file daos_uns.h.</para>
    </section><anchor xml:id="_group___u_n_s_1gaae9d29885dfb321968f20d86baff6e48"/>    <section>
    <title>DUNS_XATTR_NAME</title>
<indexterm><primary>DUNS_XATTR_NAME</primary><secondary>DAOS UNS</secondary></indexterm>
<indexterm><primary>DAOS UNS</primary><secondary>DUNS_XATTR_NAME</secondary></indexterm>
<para><computeroutput>#define DUNS_XATTR_NAME   &quot;user.daos&quot;</computeroutput></para>
<para>extended attribute name that will store the UNS info </para>
<para>
Definition at line 123 of file daos_uns.h.</para>
</section>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="_group___u_n_s_1ga94798fdadfbf49a7c658ace669a1d310"/>    <section>
    <title>anonymous enum</title>
<para><computeroutput>anonymous enum</computeroutput></para>
<para>Flags for duns_resolve_path </para>
<para>
Definition at line 27 of file daos_uns.h.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_group___u_n_s_1gaed5d956858070fac62f6effe9c6540e1"/>    <section>
    <title>duns_create_path()</title>
<indexterm><primary>duns_create_path</primary><secondary>DAOS UNS</secondary></indexterm>
<indexterm><primary>DAOS UNS</primary><secondary>duns_create_path</secondary></indexterm>
<para><computeroutput>int duns_create_path (<link linkend="_structdaos__handle__t">daos_handle_t</link> poh, const char * path, struct <link linkend="_structduns__attr__t">duns_attr_t</link> * attrp)</computeroutput></para>
<para>Create a special directory (POSIX) or file (HDF5) depending on the container type, and create a new DAOS container. The uuid of the container can be either passed in <emphasis>attrp-&gt;da_cuuid</emphasis> (deprecated) or generated internally and returned in <emphasis>da_cont</emphasis>. The extended attributes are set on the dir/file created that points to pool uuid, container uuid. This is to be used in a unified namespace solution to be able to map a path in the unified namespace to a location in the DAOS tier. The container and pool can have labels, but the UNS stores the uuids only and so labels are ignored in <emphasis>attrp</emphasis>. The user is not required to call duns_destory_attrs on <emphasis>attrp</emphasis> as this call does not allocate any buffers in attrp.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>poh</entry>
                                <entry>
<para>Pool handle </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>path</entry>
                                <entry>
<para>Valid path in an existing namespace. </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>attrp</entry>
                                <entry>
<para>Struct containing the attributes. The uuid of the container created is returned in da_cuuid.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on Success. errno code on failure. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___u_n_s_1ga48aea4ccb3ac85b26f186daa47d98654"/>    <section>
    <title>duns_destroy_attr()</title>
<indexterm><primary>duns_destroy_attr</primary><secondary>DAOS UNS</secondary></indexterm>
<indexterm><primary>DAOS UNS</primary><secondary>duns_destroy_attr</secondary></indexterm>
<para><computeroutput>void duns_destroy_attr (struct <link linkend="_structduns__attr__t">duns_attr_t</link> * attrp)</computeroutput></para>
<para>Free internal buffers allocated by the DUNS on the <emphasis>attr</emphasis> struct.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>attrp</entry>
                                <entry>
<para>Attr pointer that was passed in to duns_resolve_path. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_group___u_n_s_1ga5cd91a183d4b7ccf5d948739dff143c4"/>    <section>
    <title>duns_destroy_path()</title>
<indexterm><primary>duns_destroy_path</primary><secondary>DAOS UNS</secondary></indexterm>
<indexterm><primary>DAOS UNS</primary><secondary>duns_destroy_path</secondary></indexterm>
<para><computeroutput>int duns_destroy_path (<link linkend="_structdaos__handle__t">daos_handle_t</link> poh, const char * path)</computeroutput></para>
<para>Destroy a container and remove the path associated with it in the UNS.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>poh</entry>
                                <entry>
<para>Pool handle </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>path</entry>
                                <entry>
<para>Valid path in an existing namespace.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on Success. errno code on failure. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___u_n_s_1ga678a3b99eceb1403bae24b874e45d8fd"/>    <section>
    <title>duns_parse_attr()</title>
<indexterm><primary>duns_parse_attr</primary><secondary>DAOS UNS</secondary></indexterm>
<indexterm><primary>DAOS UNS</primary><secondary>duns_parse_attr</secondary></indexterm>
<para><computeroutput>int duns_parse_attr (char * str, <link linkend="_group___types_1gaef45c835fcfbd5f969030fd7c854eb8a">daos_size_t</link> len, struct <link linkend="_structduns__attr__t">duns_attr_t</link> * attr)</computeroutput></para>
<para>Convert a string into <link linkend="_structduns__attr__t">duns_attr_t</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>str</entry>
                                <entry>
<para>Input string </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>len</entry>
                                <entry>
<para>Length of input string </para>
</entry>
                            </row>
                            <row>
                                <entry>out                                </entry>                                <entry>attr</entry>
                                <entry>
<para>Struct containing the attrs on the path.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on Success. errno code on failure. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___u_n_s_1gabdbf8f5eb7ab131249f3675fc1b3c653"/>    <section>
    <title>duns_resolve_path()</title>
<indexterm><primary>duns_resolve_path</primary><secondary>DAOS UNS</secondary></indexterm>
<indexterm><primary>DAOS UNS</primary><secondary>duns_resolve_path</secondary></indexterm>
<para><computeroutput>int duns_resolve_path (const char * path, struct <link linkend="_structduns__attr__t">duns_attr_t</link> * attr)</computeroutput></para>
<para>Retrieve the pool and container uuids from a path corresponding to a DAOS location. If this was a path created with <link linkend="_group___u_n_s_1gaed5d956858070fac62f6effe9c6540e1">duns_create_path()</link>, then this call would return the pool, container, and type values in the <emphasis>attr</emphasis> struct (the rest of the values are not populated. By default, this call does a reverse lookup on the realpath until it finds an entry in the path that has the UNS attr. The rest of the path from that entry point is returned in <emphasis>attr.da_rel_path</emphasis>. If the entire path does not have the entry, ENODATA error is returned. To avoid doing the reverse lookup and check only that last entry, set <emphasis>attr.da_no_reverse_lookup</emphasis>.</para>

<para>To avoid going through the UNS if the user knows the pool and container uuids, a special format can be passed as a prefix for a &quot;fast path&quot;, and this call would parse those out in the <emphasis>attr</emphasis> struct and return whatever is left from the path in <emphasis>attr.da_rel_path</emphasis>. This mode is provided as a convenience to IO middleware libraries and to settle on a unified format for a mode where users know the pool and container uuids and would just like to pass them directly instead of a traditional path. The format of this path should be: daos://pool_uuid/container_uuid/xyz xyz here can be a path relative to the root of a POSIX container if the user is accessing a posix container, or it can be empty for example in the case of an HDF5 file.</para>

<para>User is responsible to call duns_destroy_attr on <emphasis>attr</emphasis> to free the internal buffers allocated.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>path</entry>
                                <entry>
<para>Valid path in an existing namespace. </para>
</entry>
                            </row>
                            <row>
                                <entry>in,out                                </entry>                                <entry>attr</entry>
                                <entry>
<para>Struct containing the attrs on the path.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on Success. errno code on failure. </para>
</formalpara>
</para>
    </section><anchor xml:id="_group___u_n_s_1ga20cba354b6b1d19ed5ba3e36530e293d"/>    <section>
    <title>duns_set_sys_name()</title>
<indexterm><primary>duns_set_sys_name</primary><secondary>DAOS UNS</secondary></indexterm>
<indexterm><primary>DAOS UNS</primary><secondary>duns_set_sys_name</secondary></indexterm>
<para><computeroutput>int duns_set_sys_name (struct <link linkend="_structduns__attr__t">duns_attr_t</link> * attrp, const char * sys)</computeroutput></para>
<para>Set the system name in the duns struct in case it was obtained in a different way than using <link linkend="_group___u_n_s_1gabdbf8f5eb7ab131249f3675fc1b3c653">duns_resolve_path()</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in                                </entry>                                <entry>attrp</entry>
                                <entry>
<para>Attr pointer </para>
</entry>
                            </row>
                            <row>
                                <entry>in                                </entry>                                <entry>sys</entry>
                                <entry>
<para>DAOS System name</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 on Success. errno code on failure. </para>
</formalpara>
</para>
</section>
</section>
</section>
